/**
 * Copyright (C) 2009 武汉金策略信息科技有限公司
 *
 * 版权所有。
 *
 * 类名　　  : @FundController.java
 * 功能概要  : 
 * 做成日期  : @2018年6月13日
 * 修改日期  :
 */
package com.jcl.controller;
/** 
 * @author zpf
 * @version 1.0
 */

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.jcl.pojo.AgentzhfundLog;
import com.jcl.pojo.FundPzlog;
import com.jcl.pojo.Subzh;
import com.jcl.service.AgentzhfundLogService;
import com.jcl.service.FundPzLogService;
import com.jcl.service.SubzhService;
import com.jcl.stock.entity.CONST;
import com.jcl.stock.simulate.DefineNumber;
import com.jcl.stock.simulate.service.SimulateStockService;
import com.jcl.util.Constant;
import com.jcl.util.DateUtil;
import com.jcl.util.DeployProperties;
import com.jcl.util.StringUtil;
import com.jcl.util.spt.HttpRequest;
import com.jcl.util.spt.SignMd5Utils;

/**
 * 资金充值提现的控制层
 */

@Controller
@RequestMapping("/subzhfund")
public class FundController {
	public static Logger log = Logger.getLogger(FundController.class);
	
	private static final String project_path = DeployProperties.getInstance().getSptReturn();
	
	@Autowired
	private SubzhService subzhService;
	
	//注入配置服务
	@Autowired
	private FundPzLogService fundPzLogService;

	@Autowired
	private AgentzhfundLogService agentzhfundLogService;
	
	@Autowired
	private SimulateStockService simulateStockService;
	
	
	
		
	//h5充值
	@RequestMapping("/toPayH5")
	public String toPayH5(String subzh,HttpSession session,Model model) {
		session.setAttribute(Constant.SESSION_LOGINNAME, subzh);
		Subzh sub=subzhService.selectBySubzh(subzh);
		if(sub!=null && sub.getIsadmin()==6){
			if(sub.getAuthState()==null || sub.getAuthState()!=2){//交易用户没有实名认证没有通过
				model.addAttribute("flag", 0);
				return "register_h5/noneed";
			}
			
		}
		return "register_h5/fundChartHFive";	
	}
	
	//h5提现
	@RequestMapping("/drawMoneyH5")
	public String drawMoneyH5(String subzh,HttpSession session,Model model) {
		session.setAttribute(Constant.SESSION_LOGINNAME, subzh);
		log.info("提现用户为===》"+subzh);
		Subzh sub=null;
		boolean isavild=false;
		String result="register_h5/fundRaising";
		try {
			sub=subzhService.selectBySubzh(subzh);
			if(sub!=null){
				Integer isadmin=sub.getIsadmin();
				if(isadmin==6){
					if(sub.getAuthState()!=null && sub.getAuthState()==2){//交易用户必须要实名认证后才能提现
						boolean b=isHaveHold(subzh);
						if(b){
							isavild=true;
						}else{
							model.addAttribute("flag", 4);//有持仓数据
						}
					}else{
						model.addAttribute("flag", 1);
					}
				}else{//非交易用户，不用实名认证也可以提现
					isavild=true;
				}
				log.info("客户资金为===》"+sub.getFundbalance());
				model.addAttribute("money",sub.getFundbalance());
			}else{
				model.addAttribute("flag", 2);
			}
			
		} catch (Exception e) {
			model.addAttribute("flag", 3);
			log.error("查询用户可用资金异常", e);;
		}
		if(!isavild){
			result="register_h5/noneed";
		}
		return result;	
	}
	
	//判断某个用户是否有持仓
	private boolean isHaveHold(String user){
		boolean b=true;
		try{
			String con="{\"start\":0,\"limit\":10,\"client_id\":\""+user+"\"}";
			String rbStr = simulateStockService.commonFunction(con, 11123);//持仓记录
			if(rbStr==null||rbStr=="null" || rbStr.equals("")){
				rbStr="{\"status\":10,\"describe\":\"地址错误或网络错误\"}";
				JSONObject obj = JSONObject.parseObject(rbStr);
			}else if(rbStr.indexOf("{")<0){
				rbStr="{\"status\":11,\"describe\":\"返回信息出错\"}";
				JSONObject obj = JSONObject.parseObject(rbStr);
			}else{//正常情况下
				JSONObject obj = JSONObject.parseObject(rbStr);
				if(obj.containsKey("status") && obj.getIntValue("status")==0){
					JSONArray arr=obj.getJSONArray("holders");
					if(arr.size()>0){
						b=false;
					}
				}
				
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		return b;
	}
	//提现成功后的页面
	@RequestMapping("/stockoptionJump")
	public String stockoptionJump() {
		
		return "register_h5/callback";	
	}
	
	/**
	 * spt银联h5--生成充值信息
	 * 
	 * @param id
	 * @param session
	 * @return
	 */
	@RequestMapping(value = "/payMentFive",produces="text/html;charset=UTF-8;")
	public String payMentFive(HttpServletRequest request, Model model,String username,String txmoney,String channel) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		String dates = new SimpleDateFormat("yyyyMMddHHmmssSSS").format(new Date());
	/*	String username = request.getParameter("username");// 用户编号
		String Amonut = request.getParameter("txmoney"); // 元
		String channel = request.getParameter("channel"); // 元
*/		BigDecimal money = new BigDecimal(txmoney);
		money = money.multiply(new BigDecimal("100")).setScale(0);

		String url = Constant.SPT_H5_PAY_URL;
		String testKey = Constant.SPT_SECRTKEY;// 秘钥

		Map<String, String> payMap = new HashMap<String, String>();
		// 必填参数
		payMap.put("merch", Constant.SPT_MERCHART);// 商户号
//		payMap.put("userid", username);// 用户标识
		payMap.put("orderno", dates + StringUtil.getRandomString(4)+username); // 商户订单号，查询时需要

		payMap.put("amount", money.toString()); // 金额，单位分
		payMap.put("body", "充值");// 商品描述

		payMap.put("notifyurl",project_path+ "/subzhfund/returnSptPayMent");// 异步回调通知地址
		payMap.put("pageurl", project_path+ "/subzhfund/stockoptionJump");// 异步回调通知地址
		payMap.put("biztype", channel);// 通道类型
		payMap.put("createip", "");// 通道类型为wx时 填写客户端ip
		
		payMap.put("comment", username);// 附加信息
		String sign = SignMd5Utils.createSign(payMap, testKey);// 签名
		payMap.put("sign", sign);// 签名串
		payMap.put("signtype", "MD5");

		model.addAttribute("payMap", payMap);
		model.addAttribute("url", url);
		return "register_h5/payMentFive";
	}
	
	
	/**
	 * spt充值返回
	 * 
	 * @param id
	 * @param session
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/returnSptPayMent",produces="text/html;charset=UTF-8;")
	public Map<String,Object> returnSptPayMent(HttpServletRequest request, HttpSession session, @RequestBody String requestBody) {
		AgentzhfundLog agentzhfundLog=new AgentzhfundLog();
		log.info("requestBody:" + JSONObject.parseObject(requestBody));
		JSONObject allStr =  JSONObject.parseObject(requestBody);
		String return_code = allStr.getString("return_code");//SUCCESS 代表成功，其它请参考错误代码
		String return_msg = allStr.getString("return_msg");//提示
		String merch_id = allStr.getString("merch_id");//商户号
		String trade_no = allStr.getString("trade_no");//平台交易号
		String order_no = allStr.getString("order_no");//商户订单号
		Integer total_fee = allStr.getInteger("total_fee");//总金额
		String pay_time = allStr.getString("pay_time");//支付完成时间，
		
		Map<String,Object> map = new HashMap<String,Object>();
		
		log.info("pay_time:"+pay_time);
		
		log.info("order_no1:"+order_no);
		List<AgentzhfundLog> alist= null;
		try {
			alist = agentzhfundLogService.selectByorderno(order_no);
			
		} catch (Exception e) {
			log.info("查询失败",e);
		}
		
		log.info("alist =====================>"+alist.size());
		if(alist!=null&&alist.size()>0) {
			int count=0;
			count++;
			log.info("该单号充值已完成"+new Date().toString()+"---"+count);
			map.put("return_code", return_code);
			return map;
		}
		
		if (!"SUCCESS".equals(return_code)) {
			log.info("支付失败信息return_msg：" + return_msg);
			agentzhfundLog.setStatus(2);
			return null;
		}
		
		log.info("order_no：" + order_no);
		BigDecimal btxmoney = new BigDecimal(total_fee);
		btxmoney = btxmoney.divide(new BigDecimal("100"),2,BigDecimal.ROUND_HALF_UP);
		log.info("btxmoney：" + btxmoney);
		String username = order_no.substring(21);
		log.info("username：" + username);
		Subzh subzh=null;
		try {
			 subzh = subzhService.selectBySubzh(order_no.substring(21));
		} catch (Exception e1) {
			log.info("根据subzh查询账户信息失败", e1);
		}
		
		if(subzh!=null) {
		try {
			agentzhfundLog.setSubzh(order_no.substring(21));
			log.info("log1:"+order_no.substring(21));
			
			agentzhfundLog.setOrderno(order_no);
			
			agentzhfundLog.setType("1");
			log.info("logtype:"+agentzhfundLog.getType());
			
			agentzhfundLog.setBz((byte)1);
			log.info("logbz:"+agentzhfundLog.getBz());
			agentzhfundLog.setModifytime(DateUtil.strToDateLong(pay_time));
			
			log.info("log4:"+(new BigDecimal(total_fee)).divide(new BigDecimal("100"),2,BigDecimal.ROUND_HALF_UP));
			agentzhfundLog.setFund((new BigDecimal(total_fee)).divide(new BigDecimal("100"),2,BigDecimal.ROUND_HALF_UP));
			
			agentzhfundLog.setModifytime(DateUtil.strToDateLong(pay_time));
			
			agentzhfundLog.setStatus(1);
			agentzhfundLog.setName(subzh.getSubzh());
			log.info("log5:"+subzh.getSubzh());
			
			TreeMap<String, Object> tmap =new TreeMap<String, Object>();
			tmap.put("充值人", agentzhfundLog.getName());
			tmap.put("充值单号", order_no);
			tmap.put("充值金额", agentzhfundLog.getFund());
			tmap.put("充值时间", agentzhfundLog.getModifytime());
			JSONObject description = JSONObject.parseObject(JSON.toJSONString(tmap));
			
			agentzhfundLog.setDescription(description.toJSONString());
			
			log.info("log6:"+agentzhfundLog.getDescription());
			
			int num=agentzhfundLogService.insertagentzhfundLog(agentzhfundLog);
			
			log.info("log7:agentzhfundLogService"+num);
			
			
			if(null!=subzh) {
				log.info("log8:subzh"+subzh);
	
				subzh.setZhstate(1);
				int count=subzhService.updateByPrimaryKey(subzh);
				log.info("log11:subzhService"+count);
			}
			
			
			FundPzlog fundPzlog = new FundPzlog();
			
			
				log.info("log:开始记录配资"+username+
						"---6--充值"+"--"+agentzhfundLog.getFund()+
						"--"+agentzhfundLog.getModifytime());
					fundPzlog.setSubzh(username);
					fundPzlog.setFundtype(6);//充值
					fundPzlog.setSetpro(0);
					fundPzlog.setFundbalance(agentzhfundLog.getFund());
					fundPzlog.setCreatetime(agentzhfundLog.getModifytime());
					
					
					int n=fundPzLogService.insertFundPzlog(fundPzlog);
					log.info("insertFundPzlog:"+n);
					
					
					
					try {
						log.info("开始调协议");
						Double fundValue = fundPzlog.getFundbalance().doubleValue();
						log.info("fundValue===》"+fundValue);
						log.info("fundPzlog.getId()===》"+fundPzlog.getId());
						String rbStr = simulateStockService.commonFunction("{\"seq_no\":"+fundPzlog.getId()+",\"client_id\":\""+username+"\",\"fund_type\":5,\"prev_fund\":0.00,\"after_fund\":"+fundValue+
								",\"warning_line\":0.00,\"open_line\":0.00}",DefineNumber.JCL_PROTOCOL_ID_REQ_FUNDMESSAGE);
						if(!StringUtil.isAnyNullOrEmpty(rbStr) && rbStr.indexOf("{") > -1){
							JsonParser parser = new JsonParser();
							JsonElement element = parser.parse(rbStr);
							JsonObject jsonObj = element.getAsJsonObject();
							log.info("添加账户资金状态1：" + rbStr+"---"+DefineNumber.JCL_PROTOCOL_ID_REQ_FUNDMESSAGE);
				    		if(CONST.STATUS_INT_INSTANCE_SUCCESS == jsonObj.get("status").getAsInt()){
				    		//掉协议成功，入金成功
				    			log.info("添加账户资金状态2：" + rbStr);
				    		} else {
				    			//入金失败
				    			log.info("添加账户资金状态3====>调协议失败：" + rbStr);
				    			try {
				    				//当用户入金失败，判断用户是否是第一次入金，如果是则还是把用户状态改为未激活
				    				List<FundPzlog> sfplist = fundPzLogService.selectBySubzh(subzh.getSubzh());
				    				if(sfplist==null&&sfplist.size()<=1) {
				    					subzh.setZhstate(0);
				    				}
				    			
				    			} catch (Exception e) {
				    				log.error("查询该用户资金流水失败", e);
								}
				    			
				    		}
						}else {
							log.info("添加账户资金状态4====>调协议失败：" + rbStr);
							try {
								//当用户入金失败，判断用户是否是第一次入金，如果是则还是把用户状态改为未激活
			    				List<FundPzlog> sfplist = fundPzLogService.selectBySubzh(subzh.getSubzh());
			    				if(sfplist==null&&sfplist.size()<=1) {
			    					subzh.setZhstate(0);
			    				}
			    			
			    			} catch (Exception e) {
			    				log.error("查询该用户资金流水失败", e);
							}
							
						}
						//修改用户状态
						try {
							int count=subzhService.updateByPrimaryKey(subzh);
							log.info("log11:subzhService"+count);
						} catch (Exception e) {
							log.error("更改用户状态异常", e);
						}
						
						map.put("return_code", return_code);
						
					} catch (Exception e) {
						if(null!=subzh) {
							
							try {
								//当用户入金出现异常，判断用户是否是第一次入金，如果是则还是把用户状态改为未激活
								log.info("log_e:subzh===>"+subzh);	
			    				List<FundPzlog> sfplist = fundPzLogService.selectBySubzh(subzh.getSubzh());
			    				if(sfplist==null&&sfplist.size()<=1) {
			    					subzh.setZhstate(0);
			    				}
			    			
			    			} catch (Exception e1) {
			    				log.error("查询该用户资金流水失败", e1);
							}
							//修改用户状态
							try {
								int count=subzhService.updateByPrimaryKey(subzh);
								log.info("log11:subzhService"+count);
							} catch (Exception e1) {
								log.error("更改用户状态异常", e1);
							}
						}						
						log.error("追加保证金异常：" + e);					
					}
		} catch (Exception e) {
			log.error("异步返回支付信息失败", e);
		}
	}
		return map;
	}
	
	

	//保存提现信息
	@SuppressWarnings("unused")
	@RequestMapping(value = "/paya",produces="text/html;charset=UTF-8;")
	@ResponseBody
	public String  paya(AgentzhfundLog afl, HttpSession session,Model model) {
		
		log.info("保存提现信息");
		String subzh = (String) session.getAttribute(Constant.SESSION_LOGINNAME);
		log.info("subzh===》"+subzh);
		if (subzh == null) {
			log.info("subzh:账户为null");	
			return "用户不存在";
		}
		
		Subzh sub = subzhService.selectBySubzh(subzh);
		
	
		
		if(null==sub) {
			log.info("sub==null:用户信息为null");	
			return "用户信息为null";
		}
		
		log.info("sub===》"+sub);
		
		
		
		if (sub.getFundbalance() == null) {
			log.info("result1:余额不足");		
			return "余额不足1";
		}
		log.info("sub.getFundbalance===》"+sub.getFundbalance());
		//sub.getFundbalance获取限制可用资金
		
		if (sub.getFundbalance().doubleValue() - Double.valueOf(afl.getAmount()) < 0) {
			log.info("result2:余额不足");
			return "余额不足2";
		}
		sub.setFundbalance(sub.getFundbalance().subtract(new BigDecimal(afl.getAmount())));
		try {
			subzhService.updateByPrimaryKey(sub);
		} catch (Exception e) {
			
		}
		log.info("getSubzh:==》"+afl.getSubzh());
		TreeMap<String, Object> tmap =new TreeMap<String, Object>();
		tmap.put("amount",afl.getAmount() );
		tmap.put("bankCardNumber",afl.getBankCardNumber());
		tmap.put("phoneNum", afl.getPhoneNum());
		tmap.put("idcard", afl.getIdcard());
		tmap.put("bankcode", afl.getBankcode());
		JSONObject description = JSONObject.parseObject(JSON.toJSONString(tmap));
		
		afl.setDescription(description.toJSONString());
		log.info("setDescription:==》"+afl.getDescription());
		
		afl.setSubzh(subzh);
		log.info("setSubzh:==》"+afl.getBanchname());
		
		afl.setBz((byte)2);
		afl.setFund(new BigDecimal(afl.getAmount()));
		afl.setStatus(4);
		afl.setType("1");
		afl.setModifytime(DateUtil.getSystemDate());
		log.info("setBz:==》"+afl.getBz());
		
		try {
			int num=agentzhfundLogService.insertagentzhfundLog(afl);
			log.info("agentzhfundLogService:==》"+num);
		} catch (Exception e) {	
			log.error("保存提现信息失败", e);
			return "提现申请提交失败，请再次提交";
		}
		
		return "ok";	
	}
	
	//审核并且提现
	@RequestMapping(value = "/gopay",produces="text/html;charset=UTF-8;")
	@ResponseBody
	public String gopay(Integer id, Integer status) {
		log.info("提现审核开始");
		AgentzhfundLog afl=null;
		try {
			afl = agentzhfundLogService.selectByPrimaryKey(id);
		} catch (Exception e) {
			log.info("查询待提现信息异常"+e);
		}
		
		if(afl!=null){
			if(status!=5) {
				return "审核未通过";
			}
		}else {
			return "提现信息不存在";
		}
		
		String description= afl.getDescription();
		JSONObject jsonobj = JSONObject.parseObject(description);
		
		afl.setAmount(jsonobj.getString("amount"));
		afl.setBankCardNumber(jsonobj.getString("bankCardNumber"));	
		afl.setPhoneNum(jsonobj.getString("phoneNum"));
		afl.setIdcard(jsonobj.getString("idcard"));
		afl.setBankcode(jsonobj.getString("bankcode"));
		
		try {
			String subzh = afl.getSubzh();
			String dates = new SimpleDateFormat("yyyyMMddHHmmssSSS").format(new Date());
			String uuid =  dates + StringUtil.getRandomString(4)+subzh;
		if (subzh == null)
				return "result用户不存在";
		
			Subzh sub = subzhService.selectBySubzh(subzh);

	/*		if (sub.getFundbalance() == null)
				return "result余额不足";
			//sub.getFundbalance获取限制可用资金
			if (sub.getFundbalance().doubleValue() - Double.valueOf(afl.getAmount()) < 0) {
				return "result余额不足";
			}*/
			
			
			String url = "http://gw.spt-pay.cn/settle";
			String testKey = Constant.SPT_SECRTKEY;// 秘钥

			TreeMap<String, String> sortedMap = new TreeMap();
			sortedMap.put("merch", Constant.SPT_MERCHART);//商户号
			sortedMap.put("orderno", uuid);//商户订单号
			DecimalFormat decimalFormat = new DecimalFormat("###################.###########");
			sortedMap.put("amount", decimalFormat.format((Double.valueOf(afl.getAmount())) * 100));//提现金额
			sortedMap.put("notifyurl", project_path+"/subzhfund/isPay");//异步回调通知地址
			sortedMap.put("cardtype", "1");//提现--对公对私
			sortedMap.put("bankcode", afl.getBankcode());//银行卡编码：例如工商银行：ICBC
			sortedMap.put("bankname", afl.getBankname());//银行卡开户行名称
			sortedMap.put("bankbranch", afl.getBanchname());//银行卡开户支行名称
			sortedMap.put("cardname", afl.getName());//收款人姓名
			sortedMap.put("cardno", afl.getBankCardNumber());//收款人银行账号
			sortedMap.put("cardmobile", afl.getPhoneNum());//银行预留手机号
			sortedMap.put("certid", afl.getIdcard());//身份证号
			sortedMap.put("province", afl.getProvince());//开户所在省
			sortedMap.put("city", afl.getCity());//开户所在市

			System.out.println(sortedMap.toString());
			String key_sign_zn = SignMd5Utils.createSign(sortedMap, testKey);// 签名
			sortedMap.put("sign", key_sign_zn);
			sortedMap.put("signtype", "MD5");

			String result = HttpRequest.sendPost(url, sortedMap);
			
			Map<String, String> resmap = JSON.parseObject(result, Map.class);
			String recode = resmap.get("return_code");
			String msg = resmap.get("return_msg");
			log.info("pay_time1:"+resmap.get("pay_time"));
			//log.info("pay_time2:"+DateUtil.strToDateLong(resmap.get("pay_time")));
			
			log.info("log1"+recode+"----"+msg);
			
			if ("SETTLE_NOT_WALLET".equals(recode)) {
				return "result"+recode+":"+msg;
			}
			if ("SETTLE_OUT_UPPER".equals(recode)) {
				return "result"+recode+":"+msg;
			}
			System.out.println(recode+"-----"+msg);
			//配置状态为4，表示提出提现申请
			
			if ("SUCCESS".equals(recode)) {
				afl.setStatus(5);//审核通过
				afl.setOrderno(uuid);
				int num=agentzhfundLogService.updateStateBysubzh(afl);
				log.info("log2"+num);
					
			}else {
				return "false";
			}
		} catch (Exception e) {
			log.info("提现记录异常=>"+e);
			return "result提现失败";
		}
		return "true";	
	}
	
	@RequestMapping(value = "/isPay",produces="text/html;charset=UTF-8;")
	@ResponseBody
	public  String  isPay(HttpServletRequest request, Model model, @RequestBody String requestBody) {
		
		log.info("提现回调开始");	
		try {
			log.info("requestBody"+requestBody);	
			JSONObject allStr = JSONObject.parseObject(requestBody);
			TreeMap<String, String> sortedMap = new TreeMap();
			sortedMap.put("order_no", allStr.getString("order_no"));
			sortedMap.put("total_fee", allStr.getString("total_fee"));
			sortedMap.put("merch_id", allStr.getString("merch_id"));
			sortedMap.put("settle_status", allStr.getString("settle_status"));
			sortedMap.put("return_code", allStr.getString("return_code"));
			sortedMap.put("settle_no", allStr.getString("settle_no"));
			String camparesign = SignMd5Utils.createSign(sortedMap, Constant.SPT_SECRTKEY);
			
			//获取提现的账号
			String username = allStr.getString("order_no").substring(21);
			
			Subzh subzh = subzhService.selectBySubzh(username);
			log.info("username:"+username+"-----subzh:"+subzh);
			
			log.info("签名号"+allStr.getString("sign")+"-----"+camparesign);
			
			log.info("判断签名号"+allStr.getString("sign").equals(camparesign));
			
			if (allStr.getString("sign").equals(camparesign)) {

				log.info("ok");
				List<AgentzhfundLog> alist = agentzhfundLogService.selectByorderno(allStr.getString("order_no"));
				log.info("alist"+alist.size()+"---"+alist);
				
				//判断是否是通过了审核的回调
				AgentzhfundLog agentzhfundLog=null;
				
				if(alist!=null) {
					agentzhfundLog=alist.get(0);
				}
				log.info("提现审核状态：===》"+agentzhfundLog.getStatus());
				
				//操作资金明细表
				FundPzlog fundPzlog = new FundPzlog();
				
				if(agentzhfundLog!=null&&agentzhfundLog.getStatus()==5) {
					
					String description= agentzhfundLog.getDescription();
					JSONObject jsonobj = JSONObject.parseObject(description);
					log.info("jsonobj===>"+jsonobj);
					agentzhfundLog.setAmount(jsonobj.getString("amount"));
					agentzhfundLog.setBankCardNumber(jsonobj.getString("bankCardNumber"));	
					agentzhfundLog.setPhoneNum(jsonobj.getString("phoneNum"));
					agentzhfundLog.setIdcard(jsonobj.getString("idcard"));
					agentzhfundLog.setBankcode(jsonobj.getString("bankcode"));	

				log.info("log:开始记录配资"+username+
						"---6--提现"+"--"+allStr.getString("total_fee")+
						"--");
					fundPzlog.setSubzh(username);
					fundPzlog.setFundtype(7);//提现值
					fundPzlog.setSetpro(0);
					fundPzlog.setFundbalance(new BigDecimal(agentzhfundLog.getAmount()));
					fundPzlog.setCreatetime(DateUtil.getSystemDate());
					
					TreeMap<String, Object> tmap =new TreeMap<String, Object>();
					tmap.put("提现人", fundPzlog.getSubzh());
					tmap.put("提现单号", allStr.getString("order_no"));
					tmap.put("提现金额",allStr.getString("total_fee"));
					tmap.put("提现时间", agentzhfundLog.getModifytime());
					tmap.put("提现银行卡编号", agentzhfundLog.getBankCardNumber());
					tmap.put("提现银行卡", agentzhfundLog.getBankCardNumber());
					JSONObject descriptions = JSONObject.parseObject(JSON.toJSONString(tmap));
					fundPzlog.setSetdesc(descriptions.toJSONString());
					
					try {
						int n=fundPzLogService.insertFundPzlog(fundPzlog);
						log.info("log提现"+n+fundPzlog.getSetdesc());
					} catch (Exception e) {
						log.info("添加用户提现流水异常", e);
					}
				
			
			  }else {//当回调成功，且提现状态不是5的时候，把用户的钱还原到用户账户账户中
					if(null!=subzh) {
						if(subzh.getFundbalance()!=null) {
							subzh.setFundbalance(subzh.getFundbalance().add((fundPzlog.getFundbalance())));
						}
						subzhService.updateByPrimaryKey(subzh);
					}
			  }
			}
		} catch (Exception e) {
			log.info("提现异步异常:"+e);
		}
		log.info("SUCCESS--提现成功");
		return "SUCCESS";
	}
	
	
	//拒绝通过审核
	@RequestMapping("/checkWithdraw")
	@ResponseBody
	public String checkWithdraw(Integer id, Integer status) {

		try {
				AgentzhfundLog fundLog = agentzhfundLogService.selectByPrimaryKey(id); 
				
				Subzh subzhEntity=null;
				if(fundLog != null){
					if(status!=null && status==6){
						try {
			 				fundLog.setStatus(6);/*状态   0是申请姿态。1是成功 5：审核通过  6：拒绝*/
			 				fundLog.setModifytime(Calendar.getInstance().getTime());
			 				log.info("审核通过保存状态：" + agentzhfundLogService.updateByPrimaryKey(fundLog));
			 			} catch (Exception efundlog) {
			 				log.error("保存预提现信息异常：" + efundlog.getMessage());
			 				return "false";
			 			}
						
						try {
							subzhEntity = subzhService.selectBySubzh(fundLog.getSubzh());
							Object obj=new Object();
							synchronized (obj) {
				 				if(subzhEntity.getFundbalance() != null){
				 					BigDecimal fund=new BigDecimal(String.valueOf(fundLog.getFund()));
				 					subzhEntity.setFundbalance(subzhEntity.getFundbalance().add(fund));
				 				} else {
				 					subzhEntity.setFundbalance(fundLog.getFund());
				 				}
				 				log.info("审核拒绝返现，保存资产状态：" + subzhService.updateByPrimaryKey(subzhEntity));
				 			}
						} catch (Exception es) {
			 				log.error("审核拒绝返现，保存资产信息异常：" + es.getMessage());
			 				return "false";
			 			}
						
						return "true";
					}
				}
			}catch(Exception e) {
				log.error("fundLog--拒绝提现异常",e);
				return "false";
			}
		return "true";
		}
}
