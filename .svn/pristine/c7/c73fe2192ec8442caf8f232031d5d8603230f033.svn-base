package com.jcl.controller;

import java.util.Date;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jcl.dao.SubzhMapper;
import com.jcl.mongodb.BeanUtil;
import com.jcl.mongodb.MongoUtils;
import com.jcl.pojo.Subzh;
import com.jcl.pojo.UserInfo;
import com.jcl.service.UserInfoService;
import com.jcl.util.StringUtil;
import com.jcl.util.Util;
import com.jcl.util.sms.MessageUtils;
import com.jcl.vo.Msm;
import com.mongodb.BasicDBObject;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;

@RequestMapping("/app")
@Controller
public class AppController {
	
	@Autowired
	private SubzhMapper subzhmapper;
	
	@Autowired
	private UserInfoService userinfoserviceImpl;
	
	public static Logger log = Logger.getLogger(AppController.class);
	
	/**
	 * 跳转到注册页面
	 * @param subzh
	 * @param model
	 * @return
	 */
	@RequestMapping("/skipRegister")
	public String skipRegister(Subzh subzh,Model model) {
		model.addAttribute("subzh", subzh);
		return "register_h5/registerDownload";
	}

	@RequestMapping("/downloadPage")
	public String skipdownpage() {
		
		return "register_h5/downloadPage";
	}
	
	
	/**
	 * 注册接口
	 * @return
	 */
	@RequestMapping(value="/reg",produces="text/html;charset=UTF-8")
	@ResponseBody
	public String reg(Subzh subzh,String code) {
		try {
			if(StringUtils.isEmpty(subzh.getPhone())) return "手机号不能为空";
			subzh.setSubzh(subzh.getPhone());
			if(StringUtils.isEmpty(subzh.getPassword())) return "密码不能为空";
			Subzh subzh2 = subzhmapper.selectByPrimaryKeySubzh(subzh.getPhone());
			if(subzh2 != null) {
				return "用户已存在";
			}
			MongoUtils.change("sms");	
			DBObject d = new BasicDBObject();
			d.put("phone", subzh.getPhone());
			DBCursor cursor = MongoUtils.queryByDBObject(d);
			Msm msm = null;
			while (cursor.hasNext()) {
				DBObject result = cursor.next();
				msm = BeanUtil.dbObject2Bean(result, new Msm());
				long time = (new Date().getTime()-msm.getTime())/1000;
				//System.out.println("进来了？"+time);
				if((new Date().getTime()-msm.getTime())/1000>60*5) {
					return "短信已失效,请重新发送";
				}
				if(StringUtils.isEmpty(code)) {
					return "短信验证码不能为空";
				}
				if(!code.equals(msm.getCode())) {
					return "验证码不匹配";
				}
			}
			if(msm==null) {
				return "找不到匹配的验证码";
			}
			subzh.setIsadmin(6);
			subzh.setKhdate(new Date());
			subzh.setIsDelete(0);//是否删除
			subzh.setAuthState(0);//实名认证
			byte[] data = subzh.getPhone().getBytes();
			long cookie = Util.Hash64(data, 0, data.length);// 生成随机的cookie
			if (cookie < 0) {
				subzh.setCookie(String.valueOf(Util.readUnsignedLong(cookie)));
			} else {
				subzh.setCookie(String.valueOf(cookie));
			}
			subzh.setIsDelete(0);
			subzh.setZhstate(0);
			int result = subzhmapper.insertSelective(subzh);
			if(result > 0) {
				//将用户信息保存到认证库
				UserInfo userInfo = new UserInfo();
				userInfo.setUsername(subzh.getSubzh());
				userInfo.setPassword(subzh.getPassword());
				userInfo.setTelephone(subzh.getPhone());
				int add = userinfoserviceImpl.add(userInfo);
				if(add > 0) {
					return "ok";
				}else {
					//删除
					boolean deleteBySubzh = subzhmapper.deleteBySubzh(subzh.getSubzh());
					if(!deleteBySubzh) {
						log.info("认证库插入失败，subzh表中：["+subzh.getSubzh()+"]删除失败！");
						return "系统异常";
					}
				}
			}
			return "系统异常";
		} catch (Exception e) {
			return "系统异常";
		}
	}
	
	/**
	 * 短信发送接口
	 * @param code
	 * @return
	 */
	@RequestMapping(value = "/sendsms",produces = "text/html;charset=UTF-8")
	@ResponseBody
	public String sendsms(String phone) {
		try {
			if(StringUtils.isEmpty(phone))return "手机号不能为空";
			if(!StringUtil.regularExpression(phone, "^(13|15|18|17|14)\\d{9}$")) {
				return "请输入正确的手机号格式";
			}
			Subzh subzh2 = subzhmapper.selectByPrimaryKeySubzh(phone);
			if(subzh2 != null) {
				return "用户已存在";
			}
			MongoUtils.change("sms");	
			DBObject d = new BasicDBObject();
			d.put("phone", phone);
			MongoUtils.deleteDB(d);
			String code = String.valueOf((int)(Math.random()*9000)+1000);
			//MessageUtils.sendMassager(phone, code);sendMsg
			MessageUtils.sendMsg(phone, code);//阿里云短信模板
			DBObject db = new BasicDBObject();
			db.put("code", code);
			db.put("phone", phone);
			db.put("time", new Date().getTime());
			MongoUtils.addOne(db);
			return "ok";
		} catch (Exception e) {
			e.printStackTrace();
			return "NoOk";
		}
	}
	
	/**
	 * 验证手机号是否唯一
	 * @param phone
	 * @return
	 */
	@RequestMapping(value = "/verifyPhone",produces = "text/plain;charset=utf-8")
	@ResponseBody
	public String verifyPhone(String phone) {
		try {
			Subzh subzh2 = subzhmapper.selectByPrimaryKeySubzh(phone);
			if(subzh2 != null) {
				return "用户已存在";
			}
			return "ok";
		} catch (Exception e) {
			e.printStackTrace();
			return "系统验证异常";
		}	
	}
}
