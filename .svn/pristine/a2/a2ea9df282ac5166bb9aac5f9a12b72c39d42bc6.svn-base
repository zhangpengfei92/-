/**
 * 
 */
package com.jcl.controller;

import java.io.OutputStream;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.xml.ws.RespectBinding;

import org.apache.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.util.CellRangeAddress;
import org.mongodb.morphia.Datastore;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.JSONObject;
import com.jcl.comm.PaginationContext;
import com.jcl.mongodb.BeanUtil;
import com.jcl.mongodb.Page;
import com.jcl.pojo.DealCj;
import com.jcl.pojo.EntrustOrder;
import com.jcl.pojo.FundMessage;
import com.jcl.pojo.Holder;
import com.jcl.pojo.RiskContract;
import com.jcl.pojo.Subzh;
import com.jcl.pojo.TradeParam;
import com.jcl.pojo.UserInfo;
import com.jcl.service.RiskContractService;
import com.jcl.service.SubzhService;
import com.jcl.stock.simulate.BussinessException;
import com.jcl.stock.simulate.service.SimulateStockService;
import com.jcl.util.CommonFunc;
import com.jcl.util.Constant;
import com.jcl.util.MyExcelUtil;
import com.jcl.util.StringUtil;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;

/**
 * @author heqiwen
 * @date 2018-5-22
 * @describe
 * @modify
 * @Copyright jcl
 */
@Controller
@RequestMapping("/trade")
public class TradeController {

	public static Logger log = Logger.getLogger(TradeController.class);
	@Autowired
	private SimulateStockService simulateStockService;
	@Autowired
	private SubzhService subzhservice;
	@Autowired
	private RiskContractService riskcontractService;

	@Autowired
	private Datastore dsForStock;

	/**
	 * 
	 * @return
	 * @author heqiwen
	 * @date 2018-5-22
	 * @decribe 获取用户资金
	 * @param session
	 * @param model
	 * @param map
	 * @return
	 */
	@RequestMapping("/getFund")
	public String getDrFund(HttpSession session, Model model, TradeParam trade) {

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			int totalCount = 0;
			String manage = (String) session.getAttribute(Constant.SESSION_AGENTZHGL);
			String username = (String) session.getAttribute(Constant.SESSION_LOGINNAME);
			Integer isAdmin = (Integer) session.getAttribute(Constant.SESSION_ISADMIN);// 当前登录者角色标识，1机构2平台，3渠道，4代理商，5经纪人
			String pt = (String) session.getAttribute(Constant.SESSION_PLATEFORM);
			trade.setJg(manage);
			trade.setPt(pt);
			int start = (PaginationContext.getPageNum() - 1) * PaginationContext.getPageSize();
			int limit = PaginationContext.getPageNum() * PaginationContext.getPageSize();
			Page<FundMessage> fundPage = new Page<FundMessage>();
			fundPage.setPagenum(PaginationContext.getPageNum());
			fundPage.setPagesize(PaginationContext.getPageSize());
			List<FundMessage> fmList = new ArrayList<FundMessage>();
			if (StringUtil.isAnyNullOrEmpty(trade.getSubzh())) {
				model.addAttribute("status", 3);
				model.addAttribute("lsflag", trade.getLsflag());
				return "fund/fundtable";
				// if(isAdmin==1 || isAdmin==2){
				// if(isAdmin==1){
				// trade.setJg(username);
				// }else{
				// trade.setPt(username);
				// }
				// }else if(isAdmin==3){
				// trade.setChannel(username);
				// }else if(isAdmin==4){
				// trade.setAgentzh(username);
				// }else if(isAdmin==5){
				// trade.setBroker(username);
				// }
				// List<Subzh> userlist=getJyusers(trade);;
				// if(userlist!=null && userlist.size()>0){
				// for(Subzh user:userlist){
				// trade.setSubzh(user.getSubzh());
				// JSONObject
				// obj=invokeCounter(trade.toFundString(),11103);//查找用户资金信息
				// if(obj.containsKey("status")){
				// int i=obj.getIntValue("status");
				// if(i==0){
				// JSONObject arr=obj.getJSONObject("data");
				// if(arr.isEmpty()){
				// continue;
				// }
				//
				// totalCount++;
				// //这里没有合约信息，所以无法通过合约查询
				// if(totalCount>start && totalCount<=limit){
				// FundMessage fund=JSONObject.parseObject(arr.toJSONString(),
				// FundMessage.class);
				// fund.setChannel(user.getAllocchannel());
				// fund.setBroker(user.getAllocbroker());
				// fund.setAgentzh(user.getAllocagent());
				// fund.setChannelname(user.getChannelname());
				// fund.setAgentname(user.getAgentname());
				// fund.setBrokername(user.getBrokername());
				//
				// fund.setSubzh(user.getSubzh());
				// fund.setPreFundBalance(formateDouble(fund.getPreFundBalance()));
				// fund.setFundBalance(formateDouble(fund.getFundBalance()));
				// fund.setTotalFloatprofit(formateDouble(fund.getTotalFloatprofit()));
				// fund.setFreezeBalance(formateDouble(fund.getFreezeBalance()));
				// fund.setEnableBalance(formateDouble(fund.getEnableBalance()));
				// fund.setRate(formateDouble(fund.getRate()));
				// fmList.add(fund);
				// }
				//
				// }
				// }
				// }
				// }

			} else {// 如果是直接查询某个用户的资金
				Subzh user = subzhservice.getTradeUserOne(trade.getSubzh());
				if (user != null) {
					JSONObject obj = invokeCounter(trade.toFundString(), 11103);// 查找用户资金信息
					if (obj.containsKey("status")) {
						int i = obj.getIntValue("status");
						/*
						 * if(obj.containsKey("totalnum")){
						 * totalCount=obj.getIntValue("totalnum"); }
						 */
						if (i == 0) {
							JSONObject arr = obj.getJSONObject("data");
							if (!arr.isEmpty()) {
								FundMessage fund = JSONObject.parseObject(arr.toJSONString(), FundMessage.class);
								// 这里没有合约信息，所以无法通过合约查询
								double total_fee = arr.getDoubleValue("total_fee");
								//冻结保证金
								Double sell_freeze_balance = arr.getDouble("sell_freeze_balance");
								fund.setFee(total_fee); //手续费总和
								fund.setSell_freeze_balance(sell_freeze_balance);
								fund.setChannel(user.getAllocchannel());
								fund.setAgentzh(user.getAllocagent());
								fund.setBroker(user.getAllocbroker());
								fund.setChannelname(user.getChannelname());
								fund.setAgentname(user.getAgentname());
								fund.setBrokername(user.getBrokername());
								fund.setSubzh(user.getSubzh());
								fund.setPreFundBalance(formateDouble(fund.getPreFundBalance()));
								fund.setFundBalance(formateDouble(fund.getFundBalance()));
								fund.setTotalFloatprofit(formateDouble(fund.getTotalFloatprofit()));
								fund.setFreezeBalance(formateDouble(fund.getFreezeBalance()));
								fund.setEnableBalance(formateDouble(fund.getEnableBalance()));
								fund.setRate(formateDouble(fund.getRate()));
								totalCount++;
								fmList.add(fund);
							}

						}
					}
				} else {
					model.addAttribute("status", 2);
					model.addAttribute("describe", "此用户账户不存在");
				}

			}
			map.put("status", 0);
			map.put("data", fmList);
			model.addAttribute("status", 0);
			fundPage.setList(fmList);
			fundPage.setCountsize(Long.valueOf(String.valueOf(totalCount)));
			fundPage.setPagecount(fundPage.getCountsize());
			model.addAttribute("page", fundPage);
		} catch (Exception e) {
			map.put("status", 1);
			map.put("describe", "实时数据 资金查询柜台出错或转化柜台数据出错");
			model.addAttribute("status", 1);
			model.addAttribute("describe", "实时数据 资金查询柜台出错或转化柜台数据出错");
			e.printStackTrace();
		}
		model.addAttribute("lsflag", trade.getLsflag());
		return "fund/fundtable";

	}

	/**
	 * 
	 * @return
	 * @author heqiwen
	 * @date 2018-5-22
	 * @decribe 资金页面
	 * @param session
	 * @param model
	 * @param trade
	 * @return
	 */
	@RequestMapping("/fundlist")
	public String toFundPage(HttpSession session, Model model) {
		session.setAttribute(Constant.SESSION_LEFTMENU, "5");
		String username = (String) session.getAttribute(Constant.SESSION_LOGINNAME);
		Integer isAdmin = (Integer) session.getAttribute(Constant.SESSION_ISADMIN);
		String manage = (String) session.getAttribute(Constant.SESSION_AGENTZHGL);
		Subzh condition = new Subzh();
		if (isAdmin == 1 || isAdmin == 2) {// 如果是机构登录，那就查询条件中带机构
			if (isAdmin == 1) {
				condition.setManage(username);
			} else {
				condition.setAllocpt(username);
			}
			condition.setIsadmin(6);
			List<Subzh> jylist = subzhservice.getSubzhLevelList(condition);// 查普通交易用户集合
			model.addAttribute("jyList", jylist);

			condition.setIsadmin(3);
			List<Subzh> qdlist = subzhservice.getSubzhLevelList(condition);// 查渠道集合
			model.addAttribute("channelList", qdlist);

			condition.setIsadmin(4);
			List<Subzh> dlslist = subzhservice.getSubzhLevelList(condition);// 查代理商集合
			model.addAttribute("agentList", dlslist);

			condition.setIsadmin(5);
			List<Subzh> jjrlist = subzhservice.getSubzhLevelList(condition);// 查经纪人集合
			model.addAttribute("brokerList", jjrlist);

			/*
			 * if(qdlist!=null && qdlist.size()>0){ String
			 * qdsub=qdlist.get(0).getSubzh(); model.addAttribute("channel",
			 * qdsub); condition.setAllocchannel(qdsub);
			 * condition.setIsadmin(4); List<Subzh>
			 * dlslist=subzhservice.getSubzhLevelList(condition);//查代理商集合
			 * model.addAttribute("agentList", dlslist); if(dlslist!=null &&
			 * dlslist.size()>0){ String dlssub=dlslist.get(0).getSubzh();
			 * condition.setAllocagent(dlssub); condition.setIsadmin(5);
			 * List<Subzh>
			 * jjrlist=subzhservice.getSubzhLevelList(condition);//查经纪人集合
			 * model.addAttribute("brokerList", jjrlist);
			 * 
			 * } }
			 */

		} else if (isAdmin == 3) {// 渠道登录后，需要加载代理商，经纪人集合
			condition.setAllocchannel(username);

			condition.setIsadmin(6);
			List<Subzh> jylist = subzhservice.getSubzhLevelList(condition);// 查经纪人集合
			model.addAttribute("jyList", jylist);

			condition.setIsadmin(4);
			List<Subzh> dlslist = subzhservice.getSubzhLevelList(condition);// 查代理商集合
			model.addAttribute("agentList", dlslist);
			/*
			 * if(dlslist!=null && dlslist.size()>0){ String
			 * dlssub=dlslist.get(0).getSubzh();
			 * condition.setAllocagent(dlssub); condition.setIsadmin(5);
			 * List<Subzh>
			 * jjrlist=subzhservice.getSubzhLevelList(condition);//查经纪人集合
			 * model.addAttribute("brokerList", jjrlist);
			 * 
			 * }
			 */
			condition.setIsadmin(5);
			List<Subzh> jjrlist = subzhservice.getSubzhLevelList(condition);// 查经纪人集合
			model.addAttribute("brokerList", jjrlist);
		} else if (isAdmin == 4) {// 代理商登录时，需要加载经纪人下拉框数据
			condition.setAllocagent(username);

			condition.setIsadmin(6);
			List<Subzh> jylist = subzhservice.getSubzhLevelList(condition);// 查普通交易用户集合
			model.addAttribute("jyList", jylist);

			condition.setIsadmin(5);
			List<Subzh> jjrlist = subzhservice.getSubzhLevelList(condition);// 查经纪人集合
			model.addAttribute("brokerList", jjrlist);

		} else if (isAdmin == 5) {// 经纪人登录时，需要加载交易用户下拉框数据
			List<Subzh> jjrlist = new ArrayList<Subzh>();
			Subzh jjr = subzhservice.getPuriSubzh(username);
			jjrlist.add(jjr);
			model.addAttribute("brokerList", jjrlist);
			if (jjrlist != null && jjrlist.size() > 0) {
				condition.setAllocbroker(jjrlist.get(0).getSubzh());
				condition.setIsadmin(6);
				List<Subzh> jylist = subzhservice.getSubzhLevelList(condition);// 查经纪人集合
				model.addAttribute("jyList", jylist);
			}
		}
		model.addAttribute("isadmin", isAdmin);
		return "fund/fundlist";

	}

	/**
	 * 
	 * @return
	 * @author heqiwen
	 * @date 2018-5-22
	 * @decribe 持仓查询页面
	 * @param session
	 * @param model
	 * @param trade
	 * @return
	 */
	@RequestMapping("/holderlist")
	public String toHoldPage(HttpSession session, Model model) {
		toFundPage(session, model);
		return "fund/holderlist";
	}

	/**
	 * 
	 * @return
	 * @author heqiwen
	 * @date 2018-5-23
	 * @decribe 查询实时持仓数据
	 * @param session
	 * @param model
	 * @param trade
	 * @return
	 */
	@RequestMapping("/getDrHolder")
	public String getDrHolder(HttpSession session, Model model, TradeParam trade) {
		try {
			int totalCount = 0;
			String manage = (String) session.getAttribute(Constant.SESSION_AGENTZHGL);
			String username = (String) session.getAttribute(Constant.SESSION_LOGINNAME);
			Integer isAdmin = (Integer) session.getAttribute(Constant.SESSION_ISADMIN);// 当前登录者角色标识，1机构2平台，3渠道，4代理商，5经纪人
			String pt = (String) session.getAttribute(Constant.SESSION_PLATEFORM);
			trade.setJg(manage);
			trade.setPt(pt);
			int start = (PaginationContext.getPageNum() - 1) * PaginationContext.getPageSize();
			int limit = PaginationContext.getPageNum() * PaginationContext.getPageSize();
			Page<Holder> hpage = new Page<Holder>();
			hpage.setPagenum(PaginationContext.getPageNum());
			hpage.setPagesize(PaginationContext.getPageSize());
			trade.setStart(0);
			trade.setLimit(100);
			List<Holder> holdList = new ArrayList<Holder>();

			List<RiskContract> clist = riskcontractService.queryContractAll(new RiskContract());
			if (StringUtil.isAnyNullOrEmpty(trade.getSubzh())) {
				model.addAttribute("status", 3);
				model.addAttribute("lsflag", trade.getLsflag());
				return "fund/holderlist";
				// if(isAdmin==1 || isAdmin==2){
				// if(isAdmin==1){
				// trade.setJg(username);
				// }else{
				// trade.setPt(username);
				// }
				// }else if(isAdmin==3){
				// trade.setChannel(username);
				// }else if(isAdmin==4){
				// trade.setAgentzh(username);
				// }else if(isAdmin==5){
				// trade.setBroker(username);
				// }
				// List<Subzh> userlist=getJyusers(trade);
				// if(userlist!=null && userlist.size()>0){
				// for(Subzh user:userlist){
				// trade.setSubzh(user.getSubzh());
				// JSONObject
				// obj=invokeCounter(trade.toString(),11123);//查找用户持仓信息
				// if(obj.containsKey("status")){
				// int i=obj.getIntValue("status");
				// if(i==0){
				// JSONArray arr=obj.getJSONArray("holders");
				// if(arr.size()>0){
				// List<Holder> list=JSONObject.parseArray(arr.toJSONString(),
				// Holder.class);
				// if(list!=null && list.size()>0){
				// for(Holder hold:list){
				// if(hold!=null){
				// //这里可能是要过滤查询条件，合约
				// if(!StringUtil.isAnyNullOrEmpty(trade.getStockCode()) &&
				// !trade.getStockCode().equals(hold.getStockCode())){
				// continue;
				// }
				// if(!StringUtil.isAnyNullOrEmpty(trade.getStockName()) &&
				// !trade.getStockName().equals(hold.getStockName())){
				// continue;
				// }
				// if(trade.getExchange()!=null && trade.getExchange()>0 &&
				// trade.getExchange().intValue()!=hold.getExchangeType()){
				// continue;
				// }
				// totalCount++;
				// if(totalCount>start && totalCount<=limit){//将每一页的数据放到list中
				// hold.setSubzh(user.getSubzh());
				// hold.setChannel(user.getAllocchannel());
				// hold.setAgentzh(user.getAllocagent());
				// hold.setBroker(user.getAllocbroker());
				// hold.setChannelname(user.getChannelname());
				// hold.setAgentname(user.getAgentname());
				// hold.setBrokername(user.getBrokername());
				// Integer currentvol=hold.getCurrentVol();
				// Integer entrustBs=hold.getEntrustBs();
				// if(entrustBs!=null && entrustBs==1){
				// hold.setFangx("卖出");
				// }else{
				// hold.setFangx("买入");
				// }
				// hold.setKeepCostPrice(formateDouble(hold.getKeepCostPrice()));//持仓均价
				// //hold.setProfit(formateDouble(hold.getProfit()));//设置持仓盈亏
				// hold.setProfit(formateCondouble(hold.getProfit(),clist,hold.getStockCode()));
				// if(currentvol==null) currentvol=0;
				// Integer todayvol=hold.getTodayVol();
				// if(todayvol==null) todayvol=0;
				// hold.setZuocang(currentvol-todayvol);
				// holdList.add(hold);
				// }
				//
				// }
				// }
				// }
				// }
				//
				//
				// }
				// }
				// }
				// }

			} else {// 如果是直接查询某个用户的持仓
				Subzh user = subzhservice.getTradeUserOne(trade.getSubzh());
				if (user != null) {
					JSONObject obj = invokeCounter(trade.toString(), 11123);// 查找用户持仓信息
					if (obj.containsKey("status")) {
						int i = obj.getIntValue("status");
						/*
						 * if(obj.containsKey("totalnum")){
						 * totalCount=obj.getIntValue("totalnum"); }
						 */
						if (i == 0) {
							JSONArray arr = obj.getJSONArray("holders");
							if (arr.size() > 0) {
								List<Holder> list = JSONObject.parseArray(arr.toJSONString(), Holder.class);
								if (list != null && list.size() > 0) {
									for (Holder hold : list) {
										if (hold != null) {
											// 这里可能是要过滤查询条件，合约
											if (!StringUtil.isAnyNullOrEmpty(trade.getStockCode())
													&& !trade.getStockCode().equals(hold.getStockCode())) {
												continue;
											}
											if (!StringUtil.isAnyNullOrEmpty(trade.getStockName())
													&& !trade.getStockName().equals(hold.getStockName())) {
												continue;
											}
											if (trade.getExchange() != null && trade.getExchange() > 0
													&& trade.getExchange().intValue() != hold.getExchangeType()) {
												continue;
											}
											totalCount++;
											if (totalCount > start && totalCount <= limit) {// 将每一页的数据放到list中
												hold.setSubzh(user.getSubzh());
												hold.setChannel(user.getAllocchannel());
												hold.setAgentzh(user.getAllocagent());
												hold.setBroker(user.getAllocbroker());
												hold.setChannelname(user.getChannelname());
												hold.setAgentname(user.getAgentname());
												hold.setBrokername(user.getBrokername());
												Integer entrustBs = hold.getEntrustBs();
												if (entrustBs != null && entrustBs == 1) {
													hold.setFangx("卖出");
												} else {
													hold.setFangx("买入");
												}
												// hold.setKeepCostPrice(formateDouble(hold.getKeepCostPrice()));//持仓均价
												hold.setKeepCostPrice(formateCondouble(hold.getKeepCostPrice(), clist,
														hold.getStockCode()));// 设置持仓盈亏
												hold.setProfit(
														formateCondouble(hold.getProfit(), clist, hold.getStockCode()));
												Integer currentvol = hold.getCurrentVol();
												if (currentvol == null)
													currentvol = 0;
												Integer todayvol = hold.getTodayVol();
												if (todayvol == null)
													todayvol = 0;
												hold.setZuocang(currentvol - todayvol);
												holdList.add(hold);
											}

										}
									}
								}
							}

						}
					}
				} else {
					model.addAttribute("status", 2);
					model.addAttribute("describe", "此用户账户不存在");
				}

			}
			/*
			 * map.put("status", 0); map.put("data", holdList);
			 */
			hpage.setList(holdList);
			hpage.setCountsize(Long.valueOf(String.valueOf(totalCount)));
			hpage.setPagecount(hpage.getCountsize());
			model.addAttribute("status", 0);
			model.addAttribute("page", hpage);
		} catch (Exception e) {
			model.addAttribute("status", 2);
			model.addAttribute("describe", "此用户账户不存在");
			e.printStackTrace();
		}
		model.addAttribute("lsflag", trade.getLsflag());
		return "fund/holderlist";

	}

	/**
	 * @return
	 * @author heqiwen
	 * @date 2018-6-14
	 * @decribe
	 * @param profit
	 * @param clist
	 * @return
	 */
	private Double formateCondouble(Double profit, List<RiskContract> clist, String stock) {
		if (profit == null) {
			profit = 0.0;
		}
		Double d = formateDouble(profit);
		if (clist == null || clist.size() == 0 || StringUtil.isAnyNullOrEmpty(stock)) {
			return d;
		} else {
			for (RiskContract contract : clist) {
				if (stock.equals(contract.getContractCode())) {
					log.info(stock + "对应合约找到最小变动价" + contract.getMinchangeprice());
					if (contract.getMinchangeprice() != null) {
						String minchage = String.valueOf(contract.getMinchangeprice());
						if (minchage.indexOf(".") > 0) {
							while (minchage.endsWith("0")) {
								minchage = minchage.substring(0, minchage.length() - 1);
							}
							if (minchage.endsWith(".")) {// 整数
								minchage = minchage.substring(0, minchage.length() - 1);
								BigDecimal b = new BigDecimal(String.valueOf(profit));
								d = b.setScale(0, BigDecimal.ROUND_HALF_UP).doubleValue();
							} else {
								int index = minchage.indexOf(".");
								int i = minchage.length() - index - 1;
								BigDecimal b = new BigDecimal(String.valueOf(profit));
								d = b.setScale(i, BigDecimal.ROUND_HALF_UP).doubleValue();
							}

						} else {
							BigDecimal b = new BigDecimal(String.valueOf(profit));
							d = b.setScale(0, BigDecimal.ROUND_HALF_UP).doubleValue();
						}
					}
					break;
				}
			}
		}
		return d;
	}

	/**
	 * 
	 * @return
	 * @author heqiwen
	 * @date 2018-5-23
	 * @decribe 查询当日委托记录
	 * @param session
	 * @param model
	 * @param trade
	 * @return
	 */
	@RequestMapping("/getDrEntrust")
	public String getDrEntrust(HttpSession session, Model model, TradeParam trade) {
		try {
			int totalCount = 0;
			String manage = (String) session.getAttribute(Constant.SESSION_AGENTZHGL);
			String username = (String) session.getAttribute(Constant.SESSION_LOGINNAME);
			Integer isAdmin = (Integer) session.getAttribute(Constant.SESSION_ISADMIN);// 当前登录者角色标识，1机构2平台，3渠道，4代理商，5经纪人
			String pt = (String) session.getAttribute(Constant.SESSION_PLATEFORM);
			trade.setJg(manage);
			trade.setPt(pt);
			int start = (PaginationContext.getPageNum() - 1) * PaginationContext.getPageSize();
			int limit = PaginationContext.getPageNum() * PaginationContext.getPageSize();
			Page<EntrustOrder> hpage = new Page<EntrustOrder>();
			hpage.setPagenum(PaginationContext.getPageNum());
			hpage.setPagesize(PaginationContext.getPageSize());
			trade.setStart(0);
			trade.setLimit(1000);
			List<EntrustOrder> holdList = new ArrayList<EntrustOrder>();
			if (StringUtil.isAnyNullOrEmpty(trade.getSubzh())) {
				model.addAttribute("status", 3);
				model.addAttribute("lsflag", trade.getLsflag());
				return "fund/entrustlist";
				// if(isAdmin==1 || isAdmin==2){
				// if(isAdmin==1){
				// trade.setJg(username);
				// }else{
				// trade.setPt(username);
				// }
				// }else if(isAdmin==3){
				// trade.setChannel(username);
				// }else if(isAdmin==4){
				// trade.setAgentzh(username);
				// }else if(isAdmin==5){
				// trade.setBroker(username);
				// }
				// List<Subzh> userlist=getJyusers(trade);
				// if(userlist!=null && userlist.size()>0){
				// for(Subzh user:userlist){
				// trade.setSubzh(user.getSubzh());
				// JSONObject
				// obj=invokeCounter(trade.toString(),11119);//查找用户当日委托信息
				// if(obj.containsKey("status")){
				// int i=obj.getIntValue("status");
				// if(i==0){
				// JSONArray arr=obj.getJSONArray("records");
				// if(arr.size()>0){
				// List<EntrustOrder>
				// list=JSONObject.parseArray(arr.toJSONString(),
				// EntrustOrder.class);
				// if(list!=null && list.size()>0){
				// for(EntrustOrder entrust:list){
				// if(entrust!=null){
				// //这里可能是要过滤查询条件，合约
				// if(!StringUtil.isAnyNullOrEmpty(trade.getStockCode()) &&
				// !trade.getStockCode().equals(entrust.getStockCode())){
				// continue;
				// }
				// if(!StringUtil.isAnyNullOrEmpty(trade.getStockName()) &&
				// !trade.getStockName().equals(entrust.getStockName())){
				// continue;
				// }
				// totalCount++;
				// if(totalCount>start && totalCount<=limit){//将每一页的数据放到list中
				// entrust.setSubzh(user.getSubzh());
				// entrust.setChannel(user.getAllocchannel());
				// entrust.setAgentzh(user.getAllocagent());
				// entrust.setBroker(user.getAllocbroker());
				// entrust.setChannelname(user.getChannelname());
				// entrust.setAgentname(user.getAgentname());
				// entrust.setBrokername(user.getBrokername());
				// log.info("委托日期entrustdate:"+entrust.getEntrustDate()+"委托时间entrusttime:"+entrust.getEntrustTime());
				// if(entrust.getEntrustDate()!=null &&
				// entrust.getEntrustTime()!=null){
				// if(entrust.getEntrustDate()>100 &&
				// entrust.getEntrustTime()>100){
				// String dealdate=String.valueOf(entrust.getEntrustDate());
				// String dealtime=String.valueOf(entrust.getEntrustTime());
				// if(entrust.getBusinessTime()<100000){
				// dealtime="0"+dealtime;
				// }
				// DateFormat df1=new SimpleDateFormat("yyyyMMddHHmmss");
				// DateFormat df2=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				// Date date=df1.parse(dealdate+dealtime);
				// entrust.setDealtime(df2.format(date));
				// }
				// }
				// entrust.setEno(getStateName(entrust.getEntrustStatus()));
				// entrust.setEntrustPrice(formateDouble(entrust.getEntrustPrice()));
				// entrust.setBusinessPrice(formateDouble(entrust.getBusinessPrice()));
				// holdList.add(entrust);
				// }
				//
				// }
				// }
				// }
				// }
				//
				//
				// }
				// }
				// }
				// }

			} else {// 如果是直接查询某个用户的资金
				Subzh user = subzhservice.getTradeUserOne(trade.getSubzh());
				if (user != null) {
					JSONObject obj = invokeCounter(trade.toString(), 11119);// 查找用户委托记录信息
					if (obj.containsKey("status")) {
						int i = obj.getIntValue("status");
						/*
						 * if(obj.containsKey("totalnum")){
						 * totalCount=obj.getIntValue("totalnum"); }
						 */
						if (i == 0) {
							JSONArray arr = obj.getJSONArray("records");
							if (arr.size() > 0) {
								List<EntrustOrder> list = JSONObject.parseArray(arr.toJSONString(), EntrustOrder.class);
								if (list != null && list.size() > 0) {
									for (EntrustOrder entrust : list) {
										if (entrust != null) {
											// 这里可能是要过滤查询条件，合约
											if (!StringUtil.isAnyNullOrEmpty(trade.getStockCode())
													&& !trade.getStockCode().equals(entrust.getStockCode())) {
												continue;
											}
											if (!StringUtil.isAnyNullOrEmpty(trade.getStockName())
													&& !trade.getStockName().equals(entrust.getStockName())) {
												continue;
											}
											totalCount++;
											if (totalCount > start && totalCount <= limit) {// 将每一页的数据放到list中
												entrust.setSubzh(user.getSubzh());
												entrust.setChannel(user.getAllocchannel());
												entrust.setAgentzh(user.getAllocagent());
												entrust.setBroker(user.getAllocbroker());
												entrust.setChannelname(user.getChannelname());
												entrust.setAgentname(user.getAgentname());
												entrust.setBrokername(user.getBrokername());
												log.info("entrust_date:" + entrust.getEntrustDate() + ",entrust_time:"
														+ entrust.getEntrustTime());
												if (entrust.getEntrustDate() != null
														&& entrust.getEntrustTime() != null) {
													if (entrust.getEntrustDate() > 100
															&& entrust.getEntrustTime() > 100) {
														String dealdate = String.valueOf(entrust.getEntrustDate());
														String dealtime = String.valueOf(entrust.getEntrustTime());
														if (entrust.getEntrustTime() < 100000) {
															dealtime = "0" + dealtime;
														}
														DateFormat df1 = new SimpleDateFormat("yyyyMMddHHmmss");
														DateFormat df2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
														Date date = df1.parse(dealdate + dealtime);
														entrust.setDealtime(df2.format(date));
													}
												}
												entrust.setEno(getStateName(entrust.getEntrustStatus()));
												entrust.setEntrustPrice(formateDouble(entrust.getEntrustPrice()));
												entrust.setBusinessPrice(formateDouble(entrust.getBusinessPrice()));
												holdList.add(entrust);
											}

										}
									}
								}
							}

						}
					}
				} else {
					model.addAttribute("status", 2);
					model.addAttribute("describe", "此用户账户不存在");
				}

			}
			/*
			 * map.put("status", 0); map.put("data", holdList);
			 */
			hpage.setList(holdList);
			hpage.setCountsize(Long.valueOf(String.valueOf(totalCount)));
			hpage.setPagecount(hpage.getCountsize());
			model.addAttribute("status", 0);
			model.addAttribute("page", hpage);
		} catch (Exception e) {
			model.addAttribute("status", 1);
			model.addAttribute("describe", "查询当日委托记录出错");
			e.printStackTrace();
		}
		model.addAttribute("lsflag", trade.getLsflag());
		return "fund/entrustlist";

	}

	/**
	 * 
	 * @return
	 * @author heqiwen
	 * @date 2018-5-23
	 * @decribe 查询当日成交记录
	 * @param session
	 * @param model
	 * @param trade
	 * @return
	 */
	@RequestMapping("/getDrDealcj")
	public String getDrDealcj(HttpSession session, Model model, TradeParam trade) {
		try {
			int totalCount = 0;
			String manage = (String) session.getAttribute(Constant.SESSION_AGENTZHGL);
			String username = (String) session.getAttribute(Constant.SESSION_LOGINNAME);
			Integer isAdmin = (Integer) session.getAttribute(Constant.SESSION_ISADMIN);// 当前登录者角色标识，1机构2平台，3渠道，4代理商，5经纪人
			String pt = (String) session.getAttribute(Constant.SESSION_PLATEFORM);
			trade.setJg(manage);
			trade.setPt(pt);
			int start = (PaginationContext.getPageNum() - 1) * PaginationContext.getPageSize();
			int limit = PaginationContext.getPageNum() * PaginationContext.getPageSize();
			Page<DealCj> hpage = new Page<DealCj>();
			hpage.setPagenum(PaginationContext.getPageNum());
			hpage.setPagesize(PaginationContext.getPageSize());
			trade.setStart(0);
			trade.setLimit(1000);
			List<DealCj> dealList = new ArrayList<DealCj>();
			if (StringUtil.isAnyNullOrEmpty(trade.getSubzh())) {
				model.addAttribute("status", 3);
				model.addAttribute("lsflag", trade.getLsflag());
				return "fund/deallist";
				// if(isAdmin==1 || isAdmin==2){
				// if(isAdmin==1){
				// trade.setJg(username);
				// }else{
				// trade.setPt(username);
				// }
				// }else if(isAdmin==3){
				// trade.setChannel(username);
				// }else if(isAdmin==4){
				// trade.setAgentzh(username);
				// }else if(isAdmin==5){
				// trade.setBroker(username);
				// }
				// List<Subzh> userlist=getJyusers(trade);
				// if(userlist!=null && userlist.size()>0){
				// for(Subzh user:userlist){
				// trade.setSubzh(user.getSubzh());
				// JSONObject
				// obj=invokeCounter(trade.toString(),11117);//查找用户当日成交信息
				// if(obj.containsKey("status")){
				// int i=obj.getIntValue("status");
				// /*int onenum=0;
				// if(obj.containsKey("totalnum")){
				// onenum=obj.getIntValue("totalnum");
				// }*/
				// if(i==0){
				// JSONArray arr=obj.getJSONArray("records");
				// if(arr.size()>0){
				// List<DealCj> list=JSONObject.parseArray(arr.toJSONString(),
				// DealCj.class);
				// if(list!=null && list.size()>0){
				// for(DealCj deal:list){
				// if(deal!=null){
				// //这里可能是要过滤查询条件，合约
				// if(!StringUtil.isAnyNullOrEmpty(trade.getStockCode()) &&
				// !trade.getStockCode().equals(deal.getStockCode())){
				// continue;
				// }
				// if(!StringUtil.isAnyNullOrEmpty(trade.getStockName()) &&
				// !trade.getStockName().equals(deal.getStockName())){
				// continue;
				// }
				// totalCount++;
				// if(totalCount>start && totalCount<=limit){//将每一页的数据放到list中
				// deal.setSubzh(user.getSubzh());
				// deal.setChannel(user.getAllocchannel());
				// deal.setAgentzh(user.getAllocagent());
				// deal.setBroker(user.getAllocbroker());
				// deal.setChannelname(user.getChannelname());
				// deal.setAgentname(user.getAgentname());
				// deal.setBrokername(user.getBrokername());
				// if(deal.getBusinessDate()!=null &&
				// deal.getBusinessTime()!=null){
				// if(deal.getBusinessDate()>100 && deal.getBusinessTime()>100){
				// String dealdate=String.valueOf(deal.getBusinessDate());
				// String dealtime=String.valueOf(deal.getBusinessTime());
				// if(deal.getBusinessTime()<100000){
				// dealtime="0"+dealtime;
				// }
				// DateFormat df1=new SimpleDateFormat("yyyyMMddHHmmss");
				// DateFormat df2=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				// Date date=df1.parse(dealdate+dealtime);
				// deal.setOrdertime(df2.format(date));
				// }
				// }
				// dealList.add(deal);
				// }
				//
				// }
				// }
				// }
				// }
				//
				//
				// }
				// }
				// }
				// }

			} else {// 如果是直接查询某个用户的成交记录
				Subzh user = subzhservice.getTradeUserOne(trade.getSubzh());
				if (user != null) {
					JSONObject obj = invokeCounter(trade.toString(), 11117);// 查找用户当日成交记录
					if (obj.containsKey("status")) {
						int i = obj.getIntValue("status");
						/*
						 * if(obj.containsKey("totalnum")){
						 * totalCount=obj.getIntValue("totalnum"); }
						 */
						if (i == 0) {
							JSONArray arr = obj.getJSONArray("records");
							if (arr.size() > 0) {
								List<DealCj> list = JSONObject.parseArray(arr.toJSONString(), DealCj.class);
								if (list != null && list.size() > 0) {
									for (DealCj deal : list) {
										if (deal != null) {
											// 这里可能是要过滤查询条件，合约
											if (!StringUtil.isAnyNullOrEmpty(trade.getStockCode())
													&& !trade.getStockCode().equals(deal.getStockCode())) {
												continue;
											}
											if (!StringUtil.isAnyNullOrEmpty(trade.getStockName())
													&& !trade.getStockName().equals(deal.getStockName())) {
												continue;
											}
											totalCount++;
											if (totalCount > start && totalCount <= limit) {// 将每一页的数据放到list中
												deal.setSubzh(user.getSubzh());
												deal.setChannel(user.getAllocchannel());
												deal.setAgentzh(user.getAllocagent());
												deal.setBroker(user.getAllocbroker());
												deal.setChannelname(user.getChannelname());
												deal.setAgentname(user.getAgentname());
												deal.setBrokername(user.getBrokername());
												if (deal.getBusinessDate() != null && deal.getBusinessTime() != null) {
													if (deal.getBusinessDate() > 100 && deal.getBusinessTime() > 100) {
														String dealdate = String.valueOf(deal.getBusinessDate());
														String dealtime = String.valueOf(deal.getBusinessTime());
														if (deal.getBusinessTime() < 100000) {
															dealtime = "0" + dealtime;
														}
														DateFormat df1 = new SimpleDateFormat("yyyyMMddHHmmss");
														DateFormat df2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
														Date date = df1.parse(dealdate + dealtime);
														deal.setOrdertime(df2.format(date));
													}
												}
												dealList.add(deal);
											}

										}
									}
								}
							}

						}
					}
				} else {
					model.addAttribute("status", 2);
					model.addAttribute("describe", "此用户账户不存在");
				}

			}
			/*
			 * map.put("status", 0); map.put("data", holdList);
			 */
			hpage.setList(dealList);
			hpage.setCountsize(Long.valueOf(String.valueOf(totalCount)));
			hpage.setPagecount(hpage.getCountsize());
			model.addAttribute("status", 0);
			model.addAttribute("page", hpage);
		} catch (Exception e) {
			model.addAttribute("status", 1);
			model.addAttribute("describe", "查询当日成交记录出错");
			e.printStackTrace();
		}
		model.addAttribute("lsflag", trade.getLsflag());
		return "fund/deallist";

	}

	public static void main(String[] args) {
		/*
		 * String data=
		 * "[{\"current_vol\":200,\"enable_vol\":200,\"entrust_bs\":0,\"exchange_type\":0,\"income_balance\":203.9998474121099,\"keep_cost_price\":21.280,\"last_price\":22.30,\"position_id\":\"\",\"stock_code\":\"000034\",\"stock_name\":\"神州数码\",\"stop_loss\":0.0,\"stop_profit\":0.0},{\"current_vol\":200,\"enable_vol\":200,\"entrust_bs\":0,\"exchange_type\":0,\"income_balance\":-111.9999847412110,\"keep_cost_price\":25.480,\"last_price\":24.920,\"position_id\":\"\",\"stock_code\":\"002405\",\"stock_name\":\"四维图新\",\"stop_loss\":0.0,\"stop_profit\":0.0}]";
		 * //Holder hold=JSONObject.parseObject(obj.toJSONString(),
		 * Holder.class); List<Holder> list=JSONObject.parseArray(data,
		 * Holder.class); if(list!=null && list.size()>0){
		 * System.out.println("size:"+list.size()); Holder holder=list.get(0);
		 * System.out.println(holder.getStockCode()+holder.getStockName()+holder
		 * .getCurrentVol()); }else{ System.out.println("没有人"); }
		 */

		/*
		 * String minchage="0.000"; while(minchage.endsWith("0")){
		 * minchage=minchage.substring(0, minchage.length()-1); }
		 * if(minchage.endsWith(".")){ System.out.println("1"); }else{
		 * System.out.println("2"+",minchage:"+minchage); int
		 * index=minchage.indexOf("."); int i=minchage.length()-index-1;
		 * System.out.println("index:"+index+",i:"+i); }
		 */
		BigDecimal b = new BigDecimal("4.56");
		double d = b.setScale(0, BigDecimal.ROUND_HALF_UP).doubleValue();
		System.out.println(d);
	}

	/**
	 * 
	 * @return
	 * @author heqiwen
	 * @date 2018-5-23
	 * @decribe 查询机构，平台，渠道，代理商或经纪人下的交易用户
	 * @param trade
	 * @param manage
	 * @return
	 */
	private List<Subzh> getJyusers(TradeParam trade) {
		Subzh sub = new Subzh();
		if (!StringUtil.isAnyNullOrEmpty(trade.getBroker())) {//
			sub.setAllocbroker(trade.getBroker());
			sub.setIsadmin(6);
		} else if (!StringUtil.isAnyNullOrEmpty(trade.getAgentzh())) {//
			sub.setAllocagent(trade.getAgentzh());
			sub.setIsadmin(6);
		} else if (!StringUtil.isAnyNullOrEmpty(trade.getChannel())) {//
			sub.setAllocchannel(trade.getChannel());
			sub.setIsadmin(6);
		} else {
			if (!StringUtil.isAnyNullOrEmpty(trade.getPt())) {
				sub.setAllocpt(trade.getPt());
			} else {
				sub.setManage(trade.getJg());
			}
			sub.setIsadmin(6);
		}
		List<Subzh> userlist = subzhservice.getTradeUserList(sub);
		return userlist;
	}

	/**
	 * 
	 * @param condition
	 * @param numb
	 * @return
	 * @author heqiwen
	 * @date 2018年4月11日
	 * @description 调用柜台接口
	 */
	public JSONObject invokeCounter(String s, int numb) {
		JSONObject obj = new JSONObject();
		try {
			log.info("功能号为" + numb + "调接口的入参：" + s);
			String rbStr = simulateStockService.commonFunction(s, numb);// 历史委托查询
			log.info("功能号为" + numb + "的接口，返回rbStr为：" + rbStr);
			// System.out.println(condition.get("client_id")+"功能号为"+numb+"的接口，返回rbStr为："+rbStr);
			if (rbStr == null || rbStr == "null" || rbStr.equals("")) {
				rbStr = "{\"status\":10,\"describe\":\"地址错误或网络错误\"}";
				obj = JSONObject.parseObject(rbStr);
			} else if (rbStr.indexOf("{") < 0) {
				rbStr = "{\"status\":11,\"describe\":\"返回信息出错\"}";
				obj = JSONObject.parseObject(rbStr);
			} else {// 正常情况下
				obj = JSONObject.parseObject(rbStr);

			}
		} catch (JSONException e) {

			e.printStackTrace();
		} catch (BussinessException e) {
			e.getMessage();
			e.printStackTrace();
		}
		return obj;
	}

	///////////////////////////////////////// 历史查询数据/////////////////////////////////////////////////////////
	/**
	 * 
	 * @return
	 * @author heqiwen
	 * @date 2018-5-29
	 * @decribe 查询历史资金信息
	 * @param trade
	 * @param session
	 * @param model
	 * @return
	 */
	@RequestMapping("/getLsFund")
	public String getFundLsList(TradeParam trade, HttpSession session, Model model) {
		try {
			long totalCount = 0;
			String manage = (String) session.getAttribute(Constant.SESSION_AGENTZHGL);
			String username = (String) session.getAttribute(Constant.SESSION_LOGINNAME);
			Integer isAdmin = (Integer) session.getAttribute(Constant.SESSION_ISADMIN);
			int start = (PaginationContext.getPageNum() - 1) * PaginationContext.getPageSize();
			int limit = PaginationContext.getPageNum() * PaginationContext.getPageSize();
			Page<FundMessage> fundPage = new Page<FundMessage>();
			fundPage.setPagenum(PaginationContext.getPageNum());
			fundPage.setPagesize(PaginationContext.getPageSize());
			List<FundMessage> fmList = new ArrayList<FundMessage>();
			DB db = dsForStock.getDB();
			DBCollection dbCollection = db.getCollection("history_fund");// 历史资金信息
			DBObject condition = new BasicDBObject();
			if (!StringUtil.isAnyNullOrEmpty(trade.getSubzh())) {
				condition.put("subzh", new BasicDBObject("$eq", trade.getSubzh()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getBroker())) {
				condition.put("broker", new BasicDBObject("$eq", trade.getBroker()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getAgentzh())) {
				condition.put("agentzh", new BasicDBObject("$eq", trade.getAgentzh()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getChannel())) {
				condition.put("channel", new BasicDBObject("$eq", trade.getChannel()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getPt())) {
				condition.put("pt", new BasicDBObject("$eq", trade.getPt()));
			}
			if (trade.getExchange() != null) {
				condition.put("exchange", new BasicDBObject("$eq", trade.getExchange()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getStockCode())) {
				condition.put("stockCode", new BasicDBObject("$eq", trade.getStockCode()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getStockName())) {
				condition.put("stockName", new BasicDBObject("$eq", trade.getStockName()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getStarttime())
					|| !StringUtil.isAnyNullOrEmpty(trade.getEndtime())) {
				DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
				DateFormat df2 = new SimpleDateFormat("yyyyMMdd");
				if (!StringUtil.isAnyNullOrEmpty(trade.getStarttime())) {
					String startdate = df2.format(df1.parse(trade.getStarttime()));
					condition.put("settleDate", new BasicDBObject("$gte", Integer.parseInt(startdate)));
				}
				if (!StringUtil.isAnyNullOrEmpty(trade.getEndtime())) {
					String enddate = df2.format(df1.parse(trade.getEndtime()));
					condition.put("settleDate", new BasicDBObject("$lte", Integer.parseInt(enddate)));
				}
			}
			if (isAdmin != null) {
				if (isAdmin == 3) {
					condition.put("channel", new BasicDBObject("$eq", username));
				} else if (isAdmin == 4) {
					condition.put("agentzh", new BasicDBObject("$eq", username));
				} else if (isAdmin == 5) {
					condition.put("broker", new BasicDBObject("$eq", username));
				}
			}

			DBObject orderBy = new BasicDBObject();
			orderBy.put("settleDate", -1);// 按tradedate倒序排
			totalCount = dbCollection.count(condition);
			DBCursor cursor = dbCollection.find(condition).sort(orderBy).skip(start)
					.limit(PaginationContext.getPageSize());
			while (cursor.hasNext()) {
				BasicDBObject dbObj = (BasicDBObject) cursor.next();
				FundMessage fund = new FundMessage();
				BeanUtil.dbObject2Bean(dbObj, fund);
				int settledate = dbObj.getInt("settleDate");
				String date = String.valueOf(settledate);
				if (settledate > 10000000) {
					String settletime = date.substring(0, 4) + "." + date.substring(4, 6) + "." + date.substring(6);
					fund.setSettleTime(settletime);
				} else if (date.length() == 7) {
					String settletime = date.substring(0, 4) + "." + date.substring(4, 5) + "." + date.substring(5);
					fund.setSettleTime(settletime);
				}
				// 可用资金enableBalance

				fmList.add(fund);
			}
			fundPage.setList(fmList);
			fundPage.setCountsize(totalCount);
			fundPage.setPagecount(totalCount);
			model.addAttribute("page", fundPage);
		} catch (Exception e) {
			e.printStackTrace();
		}
		model.addAttribute("lsflag", trade.getLsflag());
		model.addAttribute("status", 0);
		return "fund/fundtable";
	}

	/**
	 * 
	 * @return
	 * @author heqiwen
	 * @date 2018-5-29
	 * @decribe 查询历史持仓数据
	 * @param trade
	 * @param session
	 * @param model
	 * @return
	 */
	@RequestMapping("/getLsHold")
	public String getHolderLsList(TradeParam trade, HttpSession session, Model model) {
		try {
			long totalCount = 0;
			String manage = (String) session.getAttribute(Constant.SESSION_AGENTZHGL);
			String username = (String) session.getAttribute(Constant.SESSION_LOGINNAME);
			Integer isAdmin = (Integer) session.getAttribute(Constant.SESSION_ISADMIN);
			int start = (PaginationContext.getPageNum() - 1) * PaginationContext.getPageSize();
			int limit = PaginationContext.getPageNum() * PaginationContext.getPageSize();
			Page<Holder> fundPage = new Page<Holder>();
			fundPage.setPagenum(PaginationContext.getPageNum());
			fundPage.setPagesize(PaginationContext.getPageSize());
			List<Holder> fmList = new ArrayList<Holder>();
			DB db = dsForStock.getDB();
			DBCollection dbCollection = db.getCollection("history_hold");// 历史持仓数据
			DBObject condition = new BasicDBObject();
			if (!StringUtil.isAnyNullOrEmpty(trade.getSubzh())) {
				condition.put("subzh", new BasicDBObject("$eq", trade.getSubzh()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getBroker())) {
				condition.put("broker", new BasicDBObject("$eq", trade.getBroker()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getAgentzh())) {
				condition.put("agentzh", new BasicDBObject("$eq", trade.getAgentzh()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getChannel())) {
				condition.put("channel", new BasicDBObject("$eq", trade.getChannel()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getPt())) {
				condition.put("pt", new BasicDBObject("$eq", trade.getPt()));
			}
			if (trade.getExchange() != null) {
				condition.put("mark", new BasicDBObject("$eq", trade.getExchange()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getStockCode())) {
				condition.put("stockCode", new BasicDBObject("$eq", trade.getStockCode()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getStockName())) {
				condition.put("stockName", new BasicDBObject("$eq", trade.getStockName()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getStarttime())
					|| !StringUtil.isAnyNullOrEmpty(trade.getEndtime())) {
				DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
				DateFormat df2 = new SimpleDateFormat("yyyyMMdd");
				if (!StringUtil.isAnyNullOrEmpty(trade.getStarttime())) {
					String startdate = df2.format(df1.parse(trade.getStarttime()));
					condition.put("holderDate", new BasicDBObject("$gte", Integer.parseInt(startdate)));
				}
				if (!StringUtil.isAnyNullOrEmpty(trade.getEndtime())) {
					String enddate = df2.format(df1.parse(trade.getEndtime()));
					condition.put("holderDate", new BasicDBObject("$lte", Integer.parseInt(enddate)));
				}
			}
			if (isAdmin != null) {
				if (isAdmin == 3) {
					condition.put("channel", new BasicDBObject("$eq", username));
				} else if (isAdmin == 4) {
					condition.put("agentzh", new BasicDBObject("$eq", username));
				} else if (isAdmin == 5) {
					condition.put("broker", new BasicDBObject("$eq", username));
				}
			}
			DBObject orderBy = new BasicDBObject();
			orderBy.put("holderDate", -1);// 按tradedate倒序排
			totalCount = dbCollection.count(condition);
			DBCursor cursor = dbCollection.find(condition).sort(orderBy).skip(start)
					.limit(PaginationContext.getPageSize());
			while (cursor.hasNext()) {
				BasicDBObject dbObj = (BasicDBObject) cursor.next();
				Holder holder = new Holder();
				BeanUtil.dbObject2Bean(dbObj, holder);
				int settledate = dbObj.getInt("holderDate");
				String date = String.valueOf(settledate);
				if (settledate > 10000000) {
					String settletime = date.substring(0, 4) + "." + date.substring(4, 6) + "." + date.substring(6);
					holder.setHolderTime(settletime);
				} else if (date.length() == 7) {
					String settletime = date.substring(0, 4) + "." + date.substring(4, 5) + "." + date.substring(5);
					holder.setHolderTime(settletime);
				}
				if (holder.getEntrustBs() != null && holder.getEntrustBs() == 1) {
					holder.setFangx("卖出");
				} else {
					holder.setFangx("买入");
				}
				fmList.add(holder);
			}
			fundPage.setList(fmList);
			fundPage.setCountsize(totalCount);
			fundPage.setPagecount(totalCount);
			model.addAttribute("page", fundPage);
		} catch (Exception e) {
			e.printStackTrace();
		}
		model.addAttribute("status", 0);
		model.addAttribute("lsflag", trade.getLsflag());
		return "fund/holderlist";
	}

	/**
	 * 
	 * @return
	 * @author heqiwen
	 * @date 2018-5-29
	 * @decribe 查询历史的委托记录
	 * @param trade
	 * @param session
	 * @param model
	 * @return
	 */           
	@RequestMapping("/getLsEntrust")
	public String getEntrustLsList(TradeParam trade, HttpSession session, Model model) {
		try {
			long totalCount = 0;
			String manage = (String) session.getAttribute(Constant.SESSION_AGENTZHGL);
			String username = (String) session.getAttribute(Constant.SESSION_LOGINNAME);
			Integer isAdmin = (Integer) session.getAttribute(Constant.SESSION_ISADMIN);
			int start = (PaginationContext.getPageNum() - 1) * PaginationContext.getPageSize();
			int limit = PaginationContext.getPageNum() * PaginationContext.getPageSize();
			Page<EntrustOrder> fundPage = new Page<EntrustOrder>();
			fundPage.setPagenum(PaginationContext.getPageNum());
			fundPage.setPagesize(PaginationContext.getPageSize());
			List<EntrustOrder> fmList = new ArrayList<EntrustOrder>();
			DB db = dsForStock.getDB();
			DBCollection dbCollection = db.getCollection("history_wt");// 历史委托记录
			DBObject condition = new BasicDBObject();
			if (!StringUtil.isAnyNullOrEmpty(trade.getSubzh())) {
				condition.put("subzh", new BasicDBObject("$eq", trade.getSubzh()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getBroker())) {
				condition.put("broker", new BasicDBObject("$eq", trade.getBroker()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getAgentzh())) {
				condition.put("agentzh", new BasicDBObject("$eq", trade.getAgentzh()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getChannel())) {
				condition.put("channel", new BasicDBObject("$eq", trade.getChannel()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getPt())) {
				condition.put("pt", new BasicDBObject("$eq", trade.getPt()));
			}
			if (trade.getExchange() != null) {
				condition.put("exchangeType", new BasicDBObject("$eq", trade.getExchange()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getStockCode())) {
				condition.put("stockCode", new BasicDBObject("$eq", trade.getStockCode()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getStockName())) {
				condition.put("stockName", new BasicDBObject("$eq", trade.getStockName()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getStarttime())
					|| !StringUtil.isAnyNullOrEmpty(trade.getEndtime())) {
				DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
				DateFormat df2 = new SimpleDateFormat("yyyyMMdd");
				if (!StringUtil.isAnyNullOrEmpty(trade.getStarttime())) {
					String startdate = df2.format(df1.parse(trade.getStarttime()));
					condition.put("mentrusttime", new BasicDBObject("$gte", Long.parseLong(startdate + "000000")));
				}
				if (!StringUtil.isAnyNullOrEmpty(trade.getEndtime())) {
					String enddate = df2.format(df1.parse(trade.getEndtime()));
					condition.put("mentrusttime", new BasicDBObject("$lte", Long.parseLong(enddate + "235959")));
				}
			}
			if (isAdmin != null) {
				if (isAdmin == 3) {
					condition.put("channel", new BasicDBObject("$eq", username));
				} else if (isAdmin == 4) {
					condition.put("agentzh", new BasicDBObject("$eq", username));
				} else if (isAdmin == 5) {
					condition.put("broker", new BasicDBObject("$eq", username));
				}
			}
			DBObject orderBy = new BasicDBObject();
			orderBy.put("mentrusttime", -1);// 按tradedate倒序排
			totalCount = dbCollection.count(condition);
			DBCursor cursor = dbCollection.find(condition).sort(orderBy).skip(start)
					.limit(PaginationContext.getPageSize());
			while (cursor.hasNext()) {
				BasicDBObject dbObj = (BasicDBObject) cursor.next();
				EntrustOrder entrust = new EntrustOrder();
				BeanUtil.dbObject2Bean(dbObj, entrust);
				long sdate = dbObj.getLong("mentrusttime");
				String date = String.valueOf(sdate);
				if (sdate > 10000000) {
					String entrusttime = date.substring(0, 4) + "." + date.substring(4, 6) + "." + date.substring(6, 8);
					entrust.setEntime(entrusttime);
					if (date.length() > 12) {
						String dealtime = date.substring(0, 4) + "-" + date.substring(4, 6) + "-" + date.substring(6, 8)
								+ " " + date.substring(8, 10) + ":" + date.substring(10, 12) + ":" + date.substring(12);
						entrust.setDealtime(dealtime);
					} else {
						String dealtime = date.substring(0, 4) + "-" + date.substring(4, 6) + "-"
								+ date.substring(6, 8);
						entrust.setDealtime(dealtime);
					}

				}
				entrust.setEno(getStateName(entrust.getEntrustStatus()));
				fmList.add(entrust);
			}
			fundPage.setList(fmList);
			fundPage.setCountsize(totalCount);
			fundPage.setPagecount(totalCount);
			model.addAttribute("page", fundPage);
		} catch (Exception e) {
			e.printStackTrace();
		}
		model.addAttribute("status", 0);
		model.addAttribute("lsflag", trade.getLsflag());
		return "fund/entrustlist";
	}

	/**
	 * 
	 * @return
	 * @author heqiwen
	 * @date 2018-5-29
	 * @decribe 查询历史成交记录
	 * @param trade
	 * @param session
	 * @param model
	 * @return
	 */
	@RequestMapping("/getLsDeal")
	public String getDealcjLsList(TradeParam trade, HttpSession session, Model model) {
		try {
			long totalCount = 0;
			String manage = (String) session.getAttribute(Constant.SESSION_AGENTZHGL);
			String username = (String) session.getAttribute(Constant.SESSION_LOGINNAME);
			Integer isAdmin = (Integer) session.getAttribute(Constant.SESSION_ISADMIN);
			int start = (PaginationContext.getPageNum() - 1) * PaginationContext.getPageSize();
			int limit = PaginationContext.getPageNum() * PaginationContext.getPageSize();
			Page<DealCj> fundPage = new Page<DealCj>();
			fundPage.setPagenum(PaginationContext.getPageNum());
			fundPage.setPagesize(PaginationContext.getPageSize());
			List<DealCj> fmList = new ArrayList<DealCj>();
			DB db = dsForStock.getDB();
			DBCollection dbCollection = db.getCollection("history_cj");// 历史成交记录
			DBObject condition = new BasicDBObject();
			if (!StringUtil.isAnyNullOrEmpty(trade.getSubzh())) {
				condition.put("subzh", new BasicDBObject("$eq", trade.getSubzh()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getBroker())) {
				condition.put("broker", new BasicDBObject("$eq", trade.getBroker()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getAgentzh())) {
				condition.put("agentzh", new BasicDBObject("$eq", trade.getAgentzh()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getChannel())) {
				condition.put("channel", new BasicDBObject("$eq", trade.getChannel()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getPt())) {
				condition.put("pt", new BasicDBObject("$eq", trade.getPt()));
			}
			if (trade.getExchange() != null) {
				condition.put("exchangeType", new BasicDBObject("$eq", trade.getExchange()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getStockCode())) {
				condition.put("stockCode", new BasicDBObject("$eq", trade.getStockCode()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getStockName())) {
				condition.put("stockName", new BasicDBObject("$eq", trade.getStockName()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getStarttime())
					|| !StringUtil.isAnyNullOrEmpty(trade.getEndtime())) {
				DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
				DateFormat df2 = new SimpleDateFormat("yyyyMMdd");
				if (!StringUtil.isAnyNullOrEmpty(trade.getStarttime())) {
					String startdate = df2.format(df1.parse(trade.getStarttime()));
					condition.put("mdealtime", new BasicDBObject("$gte", Long.parseLong(startdate + "000000")));
				}
				if (!StringUtil.isAnyNullOrEmpty(trade.getEndtime())) {
					String enddate = df2.format(df1.parse(trade.getEndtime()));
					condition.put("mdealtime", new BasicDBObject("$lte", Long.parseLong(enddate + "235959")));
				}
			}
			if (isAdmin != null) {
				if (isAdmin == 3) {
					condition.put("channel", new BasicDBObject("$eq", username));
				} else if (isAdmin == 4) {
					condition.put("agentzh", new BasicDBObject("$eq", username));
				} else if (isAdmin == 5) {
					condition.put("broker", new BasicDBObject("$eq", username));
				}
			}
			DBObject orderBy = new BasicDBObject();
			orderBy.put("mdealtime", -1);// 按tradedate倒序排
			totalCount = dbCollection.count(condition);
			DBCursor cursor = dbCollection.find(condition).sort(orderBy).skip(start)
					.limit(PaginationContext.getPageSize());
			while (cursor.hasNext()) {
				BasicDBObject dbObj = (BasicDBObject) cursor.next();
				DealCj deal = new DealCj();
				BeanUtil.dbObject2Bean(dbObj, deal);

				long sdate = dbObj.getLong("mdealtime");
				String date = String.valueOf(sdate);
				if (sdate > 10000000) {
					String dealcjtime = date.substring(0, 4) + "." + date.substring(4, 6) + "." + date.substring(6, 8);
					deal.setDealcjtime(dealcjtime);
					String eorderno = date.substring(0, 4) + "-" + date.substring(4, 6) + "-" + date.substring(6, 8);
					if (date.length() > 8) {
						eorderno = eorderno + " " + date.substring(8, 10) + ":" + date.substring(10, 12) + ":"
								+ date.substring(12);
					}
					deal.setOrdertime(eorderno);
				}
				fmList.add(deal);
			}
			Integer lsflag = trade.getLsflag();
			fundPage.setList(fmList);
			fundPage.setCountsize(totalCount);
			fundPage.setPagecount(totalCount);
			model.addAttribute("page", fundPage);
		} catch (Exception e) {
			e.printStackTrace();
		}
		model.addAttribute("status", 0);
		model.addAttribute("lsflag", trade.getLsflag());
		return "fund/deallist";
	}

	///////////////////////////////////////// 导出报表/////////////////////////////////////////////////////////
	/**
	 * 
	 * @return
	 * @author heqiwen
	 * @date 2018-5-29
	 * @decribe 导出查询历史资金信息
	 * @param trade
	 * @param session
	 * @param model
	 * @return
	 */
	@RequestMapping("/exportLsFund")
	@ResponseBody
	public void exportFundLsList(TradeParam trade, HttpSession session, Model model, HttpServletResponse response) {
		try {
			long totalCount = 0;
			String manage = (String) session.getAttribute(Constant.SESSION_AGENTZHGL);
			String username = (String) session.getAttribute(Constant.SESSION_LOGINNAME);
			Integer isAdmin = (Integer) session.getAttribute(Constant.SESSION_ISADMIN);
			int start = (PaginationContext.getPageNum() - 1) * PaginationContext.getPageSize();
			int limit = PaginationContext.getPageNum() * PaginationContext.getPageSize();
			// Page<FundMessage> fundPage=new Page<FundMessage>();
			// fundPage.setPagenum(PaginationContext.getPageNum());
			// fundPage.setPagesize(PaginationContext.getPageSize());
			List<FundMessage> fmList = new ArrayList<FundMessage>();
			DB db = dsForStock.getDB();
			DBCollection dbCollection = db.getCollection("history_fund");// 历史资金信息
			DBObject condition = new BasicDBObject();
			if (!StringUtil.isAnyNullOrEmpty(trade.getSubzh())) {
				condition.put("subzh", new BasicDBObject("$eq", trade.getSubzh()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getBroker())) {
				condition.put("broker", new BasicDBObject("$eq", trade.getBroker()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getAgentzh())) {
				condition.put("agentzh", new BasicDBObject("$eq", trade.getAgentzh()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getChannel())) {
				condition.put("channel", new BasicDBObject("$eq", trade.getChannel()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getPt())) {
				condition.put("pt", new BasicDBObject("$eq", trade.getPt()));
			}
			if (trade.getExchange() != null) {
				condition.put("exchange", new BasicDBObject("$eq", trade.getExchange()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getStockCode())) {
				condition.put("stockCode", new BasicDBObject("$eq", trade.getStockCode()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getStockName())) {
				condition.put("stockName", new BasicDBObject("$eq", trade.getStockName()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getStarttime())
					|| !StringUtil.isAnyNullOrEmpty(trade.getEndtime())) {
				DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
				DateFormat df2 = new SimpleDateFormat("yyyyMMdd");
				if (!StringUtil.isAnyNullOrEmpty(trade.getStarttime())) {
					String startdate = df2.format(df1.parse(trade.getStarttime()));
					condition.put("settleDate", new BasicDBObject("$gte", Integer.parseInt(startdate)));
				}
				if (!StringUtil.isAnyNullOrEmpty(trade.getEndtime())) {
					String enddate = df2.format(df1.parse(trade.getEndtime()));
					condition.put("settleDate", new BasicDBObject("$lte", Integer.parseInt(enddate)));
				}
			}
			if (isAdmin != null) {
				if (isAdmin == 3) {
					condition.put("channel", new BasicDBObject("$eq", username));
				} else if (isAdmin == 4) {
					condition.put("agentzh", new BasicDBObject("$eq", username));
				} else if (isAdmin == 5) {
					condition.put("broker", new BasicDBObject("$eq", username));
				}
			}

			DBObject orderBy = new BasicDBObject();
			orderBy.put("settleDate", -1);// 按tradedate倒序排
			totalCount = dbCollection.count(condition);
			DBCursor cursor = dbCollection.find(condition).sort(orderBy).skip(start)
					.limit(PaginationContext.getPageSize());
			while (cursor.hasNext()) {
				BasicDBObject dbObj = (BasicDBObject) cursor.next();
				FundMessage fund = new FundMessage();
				BeanUtil.dbObject2Bean(dbObj, fund);
				int settledate = dbObj.getInt("settleDate");
				String date = String.valueOf(settledate);
				if (settledate > 10000000) {
					String settletime = date.substring(0, 4) + "." + date.substring(4, 6) + "." + date.substring(6);
					fund.setSettleTime(settletime);
				} else if (date.length() == 7) {
					String settletime = date.substring(0, 4) + "." + date.substring(4, 5) + "." + date.substring(5);
					fund.setSettleTime(settletime);
				}
				// 可用资金enableBalance

				fmList.add(fund);
			}
			SimpleDateFormat myFmt=new SimpleDateFormat("yyyy年MM月dd日");
			JSONArray ja = new JSONArray();// 获取业务数据集
			ja.addAll(fmList);
			Map<String, String> headMap = new LinkedHashMap<String, String>();
			headMap.put("settleTime", "日期");
			headMap.put("subzh", "用户账号");
			headMap.put("channelname", "所属渠道");
			headMap.put("agentname", "所属代理商");
			headMap.put("brokername", "所属经纪人");
			
			headMap.put("freezeBalance", "当日结存");
			headMap.put("outcomingBalance", "出金");
			headMap.put("incomingBalance", "入金");
			headMap.put("freezeBalance", "占用保证金");
			headMap.put("fee", "手续费总额");
			headMap.put("totalCloseprofit", "平仓盈亏");
			headMap.put("rate", "风险率(%)");
			MyExcelUtil.downloadExcelFile("资金流水"+myFmt.format(new Date()), headMap, ja, "yyyy-MM-dd HH:mm:ss", 0, response);
		} catch (Exception e) {
			log.info("数据导出异常");
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * @return
	 * @author heqiwen
	 * @date 2018-5-29
	 * @decribe 导出历史持仓数据
	 * @param trade
	 * @param session
	 * @param model
	 * @return
	 */
	@RequestMapping("/exportLsHold")
	public String getHolderLsList(TradeParam trade, HttpSession session,HttpServletResponse response) {
		try {
			long totalCount = 0;
			String manage = (String) session.getAttribute(Constant.SESSION_AGENTZHGL);
			String username = (String) session.getAttribute(Constant.SESSION_LOGINNAME);
			Integer isAdmin = (Integer) session.getAttribute(Constant.SESSION_ISADMIN);
			int start = (PaginationContext.getPageNum() - 1) * PaginationContext.getPageSize();
			int limit = PaginationContext.getPageNum() * PaginationContext.getPageSize();
			Page<Holder> fundPage = new Page<Holder>();
			fundPage.setPagenum(PaginationContext.getPageNum());
			fundPage.setPagesize(PaginationContext.getPageSize());
			List<Holder> fmList = new ArrayList<Holder>();
			DB db = dsForStock.getDB();
			DBCollection dbCollection = db.getCollection("history_hold");// 历史持仓数据
			DBObject condition = new BasicDBObject();
			if (!StringUtil.isAnyNullOrEmpty(trade.getSubzh())) {
				condition.put("subzh", new BasicDBObject("$eq", trade.getSubzh()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getBroker())) {
				condition.put("broker", new BasicDBObject("$eq", trade.getBroker()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getAgentzh())) {
				condition.put("agentzh", new BasicDBObject("$eq", trade.getAgentzh()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getChannel())) {
				condition.put("channel", new BasicDBObject("$eq", trade.getChannel()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getPt())) {
				condition.put("pt", new BasicDBObject("$eq", trade.getPt()));
			}
			if (trade.getExchange() != null) {
				condition.put("mark", new BasicDBObject("$eq", trade.getExchange()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getStockCode())) {
				condition.put("stockCode", new BasicDBObject("$eq", trade.getStockCode()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getStockName())) {
				condition.put("stockName", new BasicDBObject("$eq", trade.getStockName()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getStarttime())
					|| !StringUtil.isAnyNullOrEmpty(trade.getEndtime())) {
				DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
				DateFormat df2 = new SimpleDateFormat("yyyyMMdd");
				if (!StringUtil.isAnyNullOrEmpty(trade.getStarttime())) {
					String startdate = df2.format(df1.parse(trade.getStarttime()));
					condition.put("holderDate", new BasicDBObject("$gte", Integer.parseInt(startdate)));
				}
				if (!StringUtil.isAnyNullOrEmpty(trade.getEndtime())) {
					String enddate = df2.format(df1.parse(trade.getEndtime()));
					condition.put("holderDate", new BasicDBObject("$lte", Integer.parseInt(enddate)));
				}
			}
			if (isAdmin != null) {
				if (isAdmin == 3) {
					condition.put("channel", new BasicDBObject("$eq", username));
				} else if (isAdmin == 4) {
					condition.put("agentzh", new BasicDBObject("$eq", username));
				} else if (isAdmin == 5) {
					condition.put("broker", new BasicDBObject("$eq", username));
				}
			}
			DBObject orderBy = new BasicDBObject();
			orderBy.put("holderDate", -1);// 按tradedate倒序排
			totalCount = dbCollection.count(condition);
			DBCursor cursor = dbCollection.find(condition).sort(orderBy).skip(start)
					.limit(PaginationContext.getPageSize());
			while (cursor.hasNext()) {
				BasicDBObject dbObj = (BasicDBObject) cursor.next();
				Holder holder = new Holder();
				BeanUtil.dbObject2Bean(dbObj, holder);
				int settledate = dbObj.getInt("holderDate");
				String date = String.valueOf(settledate);
				if (settledate > 10000000) {
					String settletime = date.substring(0, 4) + "." + date.substring(4, 6) + "." + date.substring(6);
					holder.setHolderTime(settletime);
				} else if (date.length() == 7) {
					String settletime = date.substring(0, 4) + "." + date.substring(4, 5) + "." + date.substring(5);
					holder.setHolderTime(settletime);
				}
				if (holder.getEntrustBs() != null && holder.getEntrustBs() == 1) {
					holder.setFangx("卖出");
				} else {
					holder.setFangx("买入");
				}
				fmList.add(holder);
			}
			SimpleDateFormat myFmt=new SimpleDateFormat("yyyy年MM月dd日");
			JSONArray ja = new JSONArray();// 获取业务数据集
			ja.addAll(fmList);
			Map<String, String> headMap = new LinkedHashMap<String, String>();
			headMap.put("holderTime", "日期");
			headMap.put("subzh", "用户账号");
			headMap.put("channelname", "所属渠道");
			headMap.put("agentname", "所属代理商");
			headMap.put("brokername", "所属经纪人");
			
			headMap.put("stockCode", "合约代码");
			headMap.put("stockName", "合约名称");
			headMap.put("fangx", "方向");
			headMap.put("currentVol", "总持仓");
			headMap.put("keepCostPrice", "持仓均价");
			headMap.put("profit", "持仓盈亏");
			MyExcelUtil.downloadExcelFile("历史持仓"+myFmt.format(new Date()), headMap, ja, "yyyy-MM-dd HH:mm:ss", 0, response);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	/**
	 * 
	 * @return
	 * @author heqiwen
	 * @date 2018-5-29
	 * @decribe 导出历史的委托记录
	 * @param trade
	 * @param session
	 * @param model
	 * @return
	 */          
	@RequestMapping("/exportLsEntrust")
	public String getEntrustLsList(TradeParam trade, HttpSession session,HttpServletResponse response) {
		try {
			long totalCount = 0;
			String manage = (String) session.getAttribute(Constant.SESSION_AGENTZHGL);
			String username = (String) session.getAttribute(Constant.SESSION_LOGINNAME);
			Integer isAdmin = (Integer) session.getAttribute(Constant.SESSION_ISADMIN);
			int start = (PaginationContext.getPageNum() - 1) * PaginationContext.getPageSize();
			int limit = PaginationContext.getPageNum() * PaginationContext.getPageSize();
			Page<EntrustOrder> fundPage = new Page<EntrustOrder>();
			fundPage.setPagenum(PaginationContext.getPageNum());
			fundPage.setPagesize(PaginationContext.getPageSize());
			List<EntrustOrder> fmList = new ArrayList<EntrustOrder>();
			DB db = dsForStock.getDB();
			DBCollection dbCollection = db.getCollection("history_wt");// 历史委托记录
			DBObject condition = new BasicDBObject();
			if (!StringUtil.isAnyNullOrEmpty(trade.getSubzh())) {
				condition.put("subzh", new BasicDBObject("$eq", trade.getSubzh()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getBroker())) {
				condition.put("broker", new BasicDBObject("$eq", trade.getBroker()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getAgentzh())) {
				condition.put("agentzh", new BasicDBObject("$eq", trade.getAgentzh()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getChannel())) {
				condition.put("channel", new BasicDBObject("$eq", trade.getChannel()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getPt())) {
				condition.put("pt", new BasicDBObject("$eq", trade.getPt()));
			}
			if (trade.getExchange() != null) {
				condition.put("exchangeType", new BasicDBObject("$eq", trade.getExchange()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getStockCode())) {
				condition.put("stockCode", new BasicDBObject("$eq", trade.getStockCode()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getStockName())) {
				condition.put("stockName", new BasicDBObject("$eq", trade.getStockName()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getStarttime())
					|| !StringUtil.isAnyNullOrEmpty(trade.getEndtime())) {
				DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
				DateFormat df2 = new SimpleDateFormat("yyyyMMdd");
				if (!StringUtil.isAnyNullOrEmpty(trade.getStarttime())) {
					String startdate = df2.format(df1.parse(trade.getStarttime()));
					condition.put("mentrusttime", new BasicDBObject("$gte", Long.parseLong(startdate + "000000")));
				}
				if (!StringUtil.isAnyNullOrEmpty(trade.getEndtime())) {
					String enddate = df2.format(df1.parse(trade.getEndtime()));
					condition.put("mentrusttime", new BasicDBObject("$lte", Long.parseLong(enddate + "235959")));
				}
			}
			if (isAdmin != null) {
				if (isAdmin == 3) {
					condition.put("channel", new BasicDBObject("$eq", username));
				} else if (isAdmin == 4) {
					condition.put("agentzh", new BasicDBObject("$eq", username));
				} else if (isAdmin == 5) {
					condition.put("broker", new BasicDBObject("$eq", username));
				}
			}
			DBObject orderBy = new BasicDBObject();
			orderBy.put("mentrusttime", -1);// 按tradedate倒序排
			totalCount = dbCollection.count(condition);
			DBCursor cursor = dbCollection.find(condition).sort(orderBy).skip(start)
					.limit(PaginationContext.getPageSize());
			while (cursor.hasNext()) {
				BasicDBObject dbObj = (BasicDBObject) cursor.next();
				EntrustOrder entrust = new EntrustOrder();
				BeanUtil.dbObject2Bean(dbObj, entrust);
				long sdate = dbObj.getLong("mentrusttime");
				String date = String.valueOf(sdate);
				if (sdate > 10000000) {
					String entrusttime = date.substring(0, 4) + "." + date.substring(4, 6) + "." + date.substring(6, 8);
					entrust.setEntime(entrusttime);
					if (date.length() > 12) {
						String dealtime = date.substring(0, 4) + "-" + date.substring(4, 6) + "-" + date.substring(6, 8)
								+ " " + date.substring(8, 10) + ":" + date.substring(10, 12) + ":" + date.substring(12);
						entrust.setDealtime(dealtime);
					} else {
						String dealtime = date.substring(0, 4) + "-" + date.substring(4, 6) + "-"
								+ date.substring(6, 8);
						entrust.setDealtime(dealtime);
					}

				}
				entrust.setEno(getStateName(entrust.getEntrustStatus()));
				if(entrust.getEntrustBs()==1){
					entrust.setCmd("卖出");
				}else{
					entrust.setCmd("买入");
				}
				if(entrust.getDirectionType()==0){
					entrust.setMark("开仓");
				}else if(entrust.getDirectionType()==1){
					entrust.setMark("平仓");
				}else if(entrust.getDirectionType()==2){
					entrust.setMark("平今");
				}else if(entrust.getDirectionType()==3){
					entrust.setMark("平昨");
				}
				fmList.add(entrust);
			}
			SimpleDateFormat myFmt=new SimpleDateFormat("yyyy年MM月dd日");
			JSONArray ja = new JSONArray();// 获取业务数据集
			ja.addAll(fmList);
			Map<String, String> headMap = new LinkedHashMap<String, String>();
			headMap.put("entime", "日期");
			headMap.put("subzh", "用户账号");
			headMap.put("channelname", "所属渠道");
			headMap.put("agentname", "所属代理商");
			headMap.put("brokername", "所属经纪人");
			headMap.put("stockCode", "市场");
			headMap.put("stockCode", "合约代码");
			headMap.put("stockName", "合约名称");
			headMap.put("cmd", "方向");
			headMap.put("mark", "开平");
			headMap.put("eno", "状态");
			headMap.put("entrustPrice", "委托价格");
			headMap.put("entrustVol", "委托数量");
			headMap.put("businessVol", "已成数量");
			headMap.put("businessPrice", "已成均价");
			headMap.put("dealtime", "下单时间");
			MyExcelUtil.downloadExcelFile("历史委托"+myFmt.format(new Date()), headMap, ja, "yyyy-MM-dd HH:mm:ss", 0, response);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	/// 格式化小数，
	private Double formateDouble(Double d) {
		if (d == null) {
			return 0.00;
		}
		BigDecimal b = new BigDecimal(String.valueOf(d));
		double f1 = b.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
		return f1;
	}

	private String getStateName(int status) {
		String state = "";
		if (status == 0) {
			state = "已报";
		} else if (status == 1) {
			state = "已撤";
		} else if (status == 2) {
			state = "全部成交";
		} else if (status == 3) {
			state = "部分成交";
		} else if (status == 4) {
			state = "部撤";
		} else if (status == 5) {
			state = "废单";
		} else if (status == 6) {
			state = "报单中";
		} else if (status == 7) {
			state = "撤单中";
		} else if (status == 8) {
			state = "待报";
		} else if (status == 9) {
			state = "报单失败";
		} else if (status == 10) {
			state = "撤单失败";
		}
		return state;
	}
	
	/**
	 * 历史成交导出
	 * @param trade
	 * @param session
	 * @param model
	 * @return
	 */
	@RequestMapping("/exportLsDeal/{lsflag}")
	@ResponseBody
	public void getDealcjLsListExport(TradeParam trade,@PathVariable("lsflag")Integer lsflag, HttpSession session, HttpServletResponse response) {
		try {
			if(lsflag != null) {
				trade.setLsflag(lsflag);
			}
			long totalCount = 0;
			String manage = (String) session.getAttribute(Constant.SESSION_AGENTZHGL);
			String username = (String) session.getAttribute(Constant.SESSION_LOGINNAME);
			Integer isAdmin = (Integer) session.getAttribute(Constant.SESSION_ISADMIN);
			int start = (PaginationContext.getPageNum() - 1) * PaginationContext.getPageSize();
			int limit = PaginationContext.getPageNum() * PaginationContext.getPageSize();
			/*Page<DealCj> fundPage = new Page<DealCj>();
			fundPage.setPagenum(PaginationContext.getPageNum());
			fundPage.setPagesize(PaginationContext.getPageSize());*/
			List<DealCj> fmList = new ArrayList<DealCj>();
			DB db = dsForStock.getDB();
			DBCollection dbCollection = db.getCollection("history_cj");// 历史成交记录
			DBObject condition = new BasicDBObject();
			if (!StringUtil.isAnyNullOrEmpty(trade.getSubzh())) {
				condition.put("subzh", new BasicDBObject("$eq", trade.getSubzh()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getBroker())) {
				condition.put("broker", new BasicDBObject("$eq", trade.getBroker()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getAgentzh())) {
				condition.put("agentzh", new BasicDBObject("$eq", trade.getAgentzh()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getChannel())) {
				condition.put("channel", new BasicDBObject("$eq", trade.getChannel()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getPt())) {
				condition.put("pt", new BasicDBObject("$eq", trade.getPt()));
			}
			if (trade.getExchange() != null) {
				condition.put("exchangeType", new BasicDBObject("$eq", trade.getExchange()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getStockCode())) {
				condition.put("stockCode", new BasicDBObject("$eq", trade.getStockCode()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getStockName())) {
				condition.put("stockName", new BasicDBObject("$eq", trade.getStockName()));
			}
			if (!StringUtil.isAnyNullOrEmpty(trade.getStarttime())
					|| !StringUtil.isAnyNullOrEmpty(trade.getEndtime())) {
				DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
				DateFormat df2 = new SimpleDateFormat("yyyyMMdd");
				if (!StringUtil.isAnyNullOrEmpty(trade.getStarttime())) {
					String startdate = df2.format(df1.parse(trade.getStarttime()));
					condition.put("mdealtime", new BasicDBObject("$gte", Long.parseLong(startdate + "000000")));
				}
				if (!StringUtil.isAnyNullOrEmpty(trade.getEndtime())) {
					String enddate = df2.format(df1.parse(trade.getEndtime()));
					condition.put("mdealtime", new BasicDBObject("$lte", Long.parseLong(enddate + "235959")));
				}
			}
			if (isAdmin != null) {
				if (isAdmin == 3) {
					condition.put("channel", new BasicDBObject("$eq", username));
				} else if (isAdmin == 4) {
					condition.put("agentzh", new BasicDBObject("$eq", username));
				} else if (isAdmin == 5) {
					condition.put("broker", new BasicDBObject("$eq", username));
				}
			}
			DBObject orderBy = new BasicDBObject();
			orderBy.put("mdealtime", -1);// 按tradedate倒序排
			totalCount = dbCollection.count(condition);
			DBCursor cursor = dbCollection.find(condition).sort(orderBy).skip(start)
					.limit(PaginationContext.getPageSize());
			while (cursor.hasNext()) {
				BasicDBObject dbObj = (BasicDBObject) cursor.next();
				DealCj deal = new DealCj();
				BeanUtil.dbObject2Bean(dbObj, deal);

				long sdate = dbObj.getLong("mdealtime");
				String date = String.valueOf(sdate);
				if (sdate > 10000000) {
					String dealcjtime = date.substring(0, 4) + "." + date.substring(4, 6) + "." + date.substring(6, 8);
					deal.setDealcjtime(dealcjtime);
					String eorderno = date.substring(0, 4) + "-" + date.substring(4, 6) + "-" + date.substring(6, 8);
					if (date.length() > 8) {
						eorderno = eorderno + " " + date.substring(8, 10) + ":" + date.substring(10, 12) + ":"
								+ date.substring(12);
					}
					deal.setOrdertime(eorderno);
				}
				fmList.add(deal);
			}
			JSONArray json = new JSONArray();
			json.addAll(fmList);
			Map<String, String> headMap = new LinkedHashMap<String, String>();
			if(trade.getLsflag() != null && trade.getLsflag() ==2) {
				headMap.put("dealcjtime", "日期");
			}
			headMap.put("subzh", "用户账户");
			headMap.put("channelname", "所属渠道");
			headMap.put("agentname", "所属代理商");
			headMap.put("brokername", "所属经纪人");
			headMap.put("exchangeTypeShift", "市场");
			headMap.put("stockCode", "合约代码");
			headMap.put("stockName", "合约名称");
			headMap.put("entrustBsShift", "方向");
			headMap.put("directionTypeShift", "开平");
			headMap.put("businessVol", "成交数量");
			headMap.put("businessPrice", "成交均价");
			headMap.put("ordertime", "成交时间");
			headMap.put("fee", "手续费");
			MyExcelUtil.downloadExcelFile( "成交记录", headMap, json, "yyyy-MM-dd", 0, response);
			/*fundPage.setList(fmList);
			fundPage.setCountsize(totalCount);
			fundPage.setPagecount(totalCount);*/
			//model.addAttribute("page", fundPage);
		} catch (Exception e) {
			e.printStackTrace();
		}
		//model.addAttribute("status", 0);
		//model.addAttribute("lsflag", trade.getLsflag());
	}
}
